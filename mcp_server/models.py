# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:41:33+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class EventType(Enum):
    TYPE_UNKNOWN = 'TYPE_UNKNOWN'
    TARGET_NUM_WORKERS_CHANGED = 'TARGET_NUM_WORKERS_CHANGED'
    CURRENT_NUM_WORKERS_CHANGED = 'CURRENT_NUM_WORKERS_CHANGED'
    ACTUATION_FAILURE = 'ACTUATION_FAILURE'
    NO_CHANGE = 'NO_CHANGE'


class Algorithm(Enum):
    AUTOSCALING_ALGORITHM_UNKNOWN = 'AUTOSCALING_ALGORITHM_UNKNOWN'
    AUTOSCALING_ALGORITHM_NONE = 'AUTOSCALING_ALGORITHM_NONE'
    AUTOSCALING_ALGORITHM_BASIC = 'AUTOSCALING_ALGORITHM_BASIC'


class AutoscalingSettings(BaseModel):
    algorithm: Optional[Algorithm] = Field(
        None, description='The algorithm to use for autoscaling.'
    )
    maxNumWorkers: Optional[int] = Field(
        None, description='The maximum number of workers to cap scaling at.'
    )


class BigQueryIODetails(BaseModel):
    dataset: Optional[str] = Field(
        None, description='Dataset accessed in the connection.'
    )
    projectId: Optional[str] = Field(
        None, description='Project accessed in the connection.'
    )
    query: Optional[str] = Field(
        None, description='Query used to access data in the connection.'
    )
    table: Optional[str] = Field(None, description='Table accessed in the connection.')


class BigTableIODetails(BaseModel):
    instanceId: Optional[str] = Field(
        None, description='InstanceId accessed in the connection.'
    )
    projectId: Optional[str] = Field(
        None, description='ProjectId accessed in the connection.'
    )
    tableId: Optional[str] = Field(
        None, description='TableId accessed in the connection.'
    )


class CPUTime(BaseModel):
    rate: Optional[float] = Field(
        None,
        description='Average CPU utilization rate (% non-idle cpu / second) since previous sample.',
    )
    timestamp: Optional[str] = Field(None, description='Timestamp of the measurement.')
    totalMs: Optional[str] = Field(
        None,
        description='Total active CPU time across all cores (ie., non-idle) in milliseconds since start-up.',
    )


class ComponentSource(BaseModel):
    name: Optional[str] = Field(
        None, description='Dataflow service generated name for this source.'
    )
    originalTransformOrCollection: Optional[str] = Field(
        None,
        description='User name for the original user transform or collection with which this source is most closely associated.',
    )
    userName: Optional[str] = Field(
        None,
        description='Human-readable name for this transform; may be user or system generated.',
    )


class ComponentTransform(BaseModel):
    name: Optional[str] = Field(
        None, description='Dataflow service generated name for this source.'
    )
    originalTransform: Optional[str] = Field(
        None,
        description='User name for the original user transform with which this transform is most closely associated.',
    )
    userName: Optional[str] = Field(
        None,
        description='Human-readable name for this transform; may be user or system generated.',
    )


class Kind(Enum):
    INVALID = 'INVALID'
    SUM = 'SUM'
    MAX = 'MAX'
    MIN = 'MIN'
    MEAN = 'MEAN'
    OR = 'OR'
    AND = 'AND'
    SET = 'SET'
    DISTRIBUTION = 'DISTRIBUTION'
    LATEST_VALUE = 'LATEST_VALUE'


class StandardUnits(Enum):
    BYTES = 'BYTES'
    BYTES_PER_SEC = 'BYTES_PER_SEC'
    MILLISECONDS = 'MILLISECONDS'
    MICROSECONDS = 'MICROSECONDS'
    NANOSECONDS = 'NANOSECONDS'
    TIMESTAMP_MSEC = 'TIMESTAMP_MSEC'
    TIMESTAMP_USEC = 'TIMESTAMP_USEC'
    TIMESTAMP_NSEC = 'TIMESTAMP_NSEC'


class CounterMetadata(BaseModel):
    description: Optional[str] = Field(
        None, description='Human-readable description of the counter semantics.'
    )
    kind: Optional[Kind] = Field(None, description='Counter aggregation kind.')
    otherUnits: Optional[str] = Field(
        None, description='A string referring to the unit type.'
    )
    standardUnits: Optional[StandardUnits] = Field(
        None, description='System defined Units, see above enum.'
    )


class Origin(Enum):
    SYSTEM = 'SYSTEM'
    USER = 'USER'


class Portion(Enum):
    ALL = 'ALL'
    KEY = 'KEY'
    VALUE = 'VALUE'


class CounterStructuredName(BaseModel):
    componentStepName: Optional[str] = Field(
        None, description='Name of the optimized step being executed by the workers.'
    )
    executionStepName: Optional[str] = Field(
        None,
        description='Name of the stage. An execution step contains multiple component steps.',
    )
    inputIndex: Optional[int] = Field(
        None,
        description="Index of an input collection that's being read from/written to as a side input. The index identifies a step's side inputs starting by 1 (e.g. the first side input has input_index 1, the third has input_index 3). Side inputs are identified by a pair of (original_step_name, input_index). This field helps uniquely identify them.",
    )
    name: Optional[str] = Field(
        None,
        description='Counter name. Not necessarily globally-unique, but unique within the context of the other fields. Required.',
    )
    origin: Optional[Origin] = Field(
        None, description='One of the standard Origins defined above.'
    )
    originNamespace: Optional[str] = Field(
        None,
        description="A string containing a more specific namespace of the counter's origin.",
    )
    originalRequestingStepName: Optional[str] = Field(
        None,
        description='The step name requesting an operation, such as GBK. I.e. the ParDo causing a read/write from shuffle to occur, or a read from side inputs.',
    )
    originalStepName: Optional[str] = Field(
        None,
        description="System generated name of the original step in the user's graph, before optimization.",
    )
    portion: Optional[Portion] = Field(
        None, description='Portion of this counter, either key or value.'
    )
    workerId: Optional[str] = Field(None, description='ID of a particular worker.')


class CounterStructuredNameAndMetadata(BaseModel):
    metadata: Optional[CounterMetadata] = Field(
        None, description='Metadata associated with a counter'
    )
    name: Optional[CounterStructuredName] = Field(
        None, description='Structured name of the counter.'
    )


class CustomSourceLocation(BaseModel):
    stateful: Optional[bool] = Field(
        None, description='Whether this source is stateful.'
    )


class DataDiskAssignment(BaseModel):
    dataDisks: Optional[List[str]] = Field(
        None,
        description='Mounted data disks. The order is important a data disk\'s 0-based index in this list defines which persistent directory the disk is mounted to, for example the list of { "myproject-1014-104817-4c2-harness-0-disk-0" }, { "myproject-1014-104817-4c2-harness-0-disk-1" }.',
    )
    vmInstance: Optional[str] = Field(
        None,
        description='VM instance name the data disks mounted to, for example "myproject-1014-104817-4c2-harness-0".',
    )


class DatastoreIODetails(BaseModel):
    namespace: Optional[str] = Field(
        None, description='Namespace used in the connection.'
    )
    projectId: Optional[str] = Field(
        None, description='ProjectId accessed in the connection.'
    )


class DebugOptions(BaseModel):
    enableHotKeyLogging: Optional[bool] = Field(
        None,
        description="When true, enables the logging of the literal hot key to the user's Cloud Logging.",
    )


class DeleteSnapshotResponse(BaseModel):
    pass


class DerivationMode(Enum):
    SOURCE_DERIVATION_MODE_UNKNOWN = 'SOURCE_DERIVATION_MODE_UNKNOWN'
    SOURCE_DERIVATION_MODE_INDEPENDENT = 'SOURCE_DERIVATION_MODE_INDEPENDENT'
    SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT = 'SOURCE_DERIVATION_MODE_CHILD_OF_CURRENT'
    SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT = (
        'SOURCE_DERIVATION_MODE_SIBLING_OF_CURRENT'
    )


class Disk(BaseModel):
    diskType: Optional[str] = Field(
        None,
        description='Disk storage type, as defined by Google Compute Engine. This must be a disk type appropriate to the project and zone in which the workers will run. If unknown or unspecified, the service will attempt to choose a reasonable default. For example, the standard persistent disk type is a resource name typically ending in "pd-standard". If SSD persistent disks are available, the resource name typically ends with "pd-ssd". The actual valid values are defined the Google Compute Engine API, not by the Cloud Dataflow API; consult the Google Compute Engine documentation for more information about determining the set of available disk types for a particular project and zone. Google Compute Engine Disk types are local to a particular project in a particular zone, and so the resource name will typically look something like this: compute.googleapis.com/projects/project-id/zones/zone/diskTypes/pd-standard',
    )
    mountPoint: Optional[str] = Field(
        None, description='Directory in a VM where disk is mounted.'
    )
    sizeGb: Optional[int] = Field(
        None,
        description='Size of disk in GB. If zero or unspecified, the service will attempt to choose a reasonable default.',
    )


class DisplayData(BaseModel):
    boolValue: Optional[bool] = Field(
        None, description='Contains value if the data is of a boolean type.'
    )
    durationValue: Optional[str] = Field(
        None, description='Contains value if the data is of duration type.'
    )
    floatValue: Optional[float] = Field(
        None, description='Contains value if the data is of float type.'
    )
    int64Value: Optional[str] = Field(
        None, description='Contains value if the data is of int64 type.'
    )
    javaClassValue: Optional[str] = Field(
        None, description='Contains value if the data is of java class type.'
    )
    key: Optional[str] = Field(
        None,
        description='The key identifying the display data. This is intended to be used as a label for the display data when viewed in a dax monitoring system.',
    )
    label: Optional[str] = Field(
        None, description='An optional label to display in a dax UI for the element.'
    )
    namespace: Optional[str] = Field(
        None,
        description='The namespace for the key. This is usually a class name or programming language namespace (i.e. python module) which defines the display data. This allows a dax monitoring system to specially handle the data and perform custom rendering.',
    )
    shortStrValue: Optional[str] = Field(
        None,
        description='A possible additional shorter value to display. For example a java_class_name_value of com.mypackage.MyDoFn will be stored with MyDoFn as the short_str_value and com.mypackage.MyDoFn as the java_class_name value. short_str_value can be displayed and java_class_name_value will be displayed as a tooltip.',
    )
    strValue: Optional[str] = Field(
        None, description='Contains value if the data is of string type.'
    )
    timestampValue: Optional[str] = Field(
        None, description='Contains value if the data is of timestamp type.'
    )
    url: Optional[str] = Field(None, description='An optional full URL.')


class FlexResourceSchedulingGoal(Enum):
    FLEXRS_UNSPECIFIED = 'FLEXRS_UNSPECIFIED'
    FLEXRS_SPEED_OPTIMIZED = 'FLEXRS_SPEED_OPTIMIZED'
    FLEXRS_COST_OPTIMIZED = 'FLEXRS_COST_OPTIMIZED'


class ShuffleMode(Enum):
    SHUFFLE_MODE_UNSPECIFIED = 'SHUFFLE_MODE_UNSPECIFIED'
    VM_BASED = 'VM_BASED'
    SERVICE_BASED = 'SERVICE_BASED'


class ExecutionStageState1(Enum):
    JOB_STATE_UNKNOWN = 'JOB_STATE_UNKNOWN'
    JOB_STATE_STOPPED = 'JOB_STATE_STOPPED'
    JOB_STATE_RUNNING = 'JOB_STATE_RUNNING'
    JOB_STATE_DONE = 'JOB_STATE_DONE'
    JOB_STATE_FAILED = 'JOB_STATE_FAILED'
    JOB_STATE_CANCELLED = 'JOB_STATE_CANCELLED'
    JOB_STATE_UPDATED = 'JOB_STATE_UPDATED'
    JOB_STATE_DRAINING = 'JOB_STATE_DRAINING'
    JOB_STATE_DRAINED = 'JOB_STATE_DRAINED'
    JOB_STATE_PENDING = 'JOB_STATE_PENDING'
    JOB_STATE_CANCELLING = 'JOB_STATE_CANCELLING'
    JOB_STATE_QUEUED = 'JOB_STATE_QUEUED'
    JOB_STATE_RESOURCE_CLEANING_UP = 'JOB_STATE_RESOURCE_CLEANING_UP'


class ExecutionStageState(BaseModel):
    currentStateTime: Optional[str] = Field(
        None, description='The time at which the stage transitioned to this state.'
    )
    executionStageName: Optional[str] = Field(
        None, description='The name of the execution stage.'
    )
    executionStageState: Optional[ExecutionStageState1] = Field(
        None,
        description='Executions stage states allow the same set of values as JobState.',
    )


class Kind1(Enum):
    UNKNOWN_KIND = 'UNKNOWN_KIND'
    PAR_DO_KIND = 'PAR_DO_KIND'
    GROUP_BY_KEY_KIND = 'GROUP_BY_KEY_KIND'
    FLATTEN_KIND = 'FLATTEN_KIND'
    READ_KIND = 'READ_KIND'
    WRITE_KIND = 'WRITE_KIND'
    CONSTANT_KIND = 'CONSTANT_KIND'
    SINGLETON_KIND = 'SINGLETON_KIND'
    SHUFFLE_KIND = 'SHUFFLE_KIND'


class FailedLocation(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that failed to respond.',
    )


class FileIODetails(BaseModel):
    filePattern: Optional[str] = Field(
        None, description='File Pattern used to access files by the connector.'
    )


class AutoscalingAlgorithm(Enum):
    AUTOSCALING_ALGORITHM_UNKNOWN = 'AUTOSCALING_ALGORITHM_UNKNOWN'
    AUTOSCALING_ALGORITHM_NONE = 'AUTOSCALING_ALGORITHM_NONE'
    AUTOSCALING_ALGORITHM_BASIC = 'AUTOSCALING_ALGORITHM_BASIC'


class FlexrsGoal(Enum):
    FLEXRS_UNSPECIFIED = 'FLEXRS_UNSPECIFIED'
    FLEXRS_SPEED_OPTIMIZED = 'FLEXRS_SPEED_OPTIMIZED'
    FLEXRS_COST_OPTIMIZED = 'FLEXRS_COST_OPTIMIZED'


class IpConfiguration(Enum):
    WORKER_IP_UNSPECIFIED = 'WORKER_IP_UNSPECIFIED'
    WORKER_IP_PUBLIC = 'WORKER_IP_PUBLIC'
    WORKER_IP_PRIVATE = 'WORKER_IP_PRIVATE'


class FlexTemplateRuntimeEnvironment(BaseModel):
    additionalExperiments: Optional[List[str]] = Field(
        None, description='Additional experiment flags for the job.'
    )
    additionalUserLabels: Optional[Dict[str, str]] = Field(
        None,
        description='Additional user labels to be specified for the job. Keys and values must follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.',
    )
    autoscalingAlgorithm: Optional[AutoscalingAlgorithm] = Field(
        None, description='The algorithm to use for autoscaling'
    )
    diskSizeGb: Optional[int] = Field(
        None, description='Worker disk size, in gigabytes.'
    )
    dumpHeapOnOom: Optional[bool] = Field(
        None,
        description='If true, when processing time is spent almost entirely on garbage collection (GC), saves a heap dump before ending the thread or process. If false, ends the thread or process without saving a heap dump. Does not save a heap dump when the Java Virtual Machine (JVM) has an out of memory error during processing. The location of the heap file is either echoed back to the user, or the user is given the opportunity to download the heap file.',
    )
    enableLauncherVmSerialPortLogging: Optional[bool] = Field(
        None,
        description='If true serial port logging will be enabled for the launcher VM.',
    )
    enableStreamingEngine: Optional[bool] = Field(
        None, description='Whether to enable Streaming Engine for the job.'
    )
    flexrsGoal: Optional[FlexrsGoal] = Field(
        None,
        description='Set FlexRS goal for the job. https://cloud.google.com/dataflow/docs/guides/flexrs',
    )
    ipConfiguration: Optional[IpConfiguration] = Field(
        None, description='Configuration for VM IPs.'
    )
    kmsKeyName: Optional[str] = Field(
        None,
        description='Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/',
    )
    launcherMachineType: Optional[str] = Field(
        None,
        description='The machine type to use for launching the job. The default is n1-standard-1.',
    )
    machineType: Optional[str] = Field(
        None,
        description='The machine type to use for the job. Defaults to the value from the template if not specified.',
    )
    maxWorkers: Optional[int] = Field(
        None,
        description='The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000.',
    )
    network: Optional[str] = Field(
        None,
        description='Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".',
    )
    numWorkers: Optional[int] = Field(
        None,
        description='The initial number of Google Compute Engine instances for the job.',
    )
    saveHeapDumpsToGcsPath: Optional[str] = Field(
        None,
        description='Cloud Storage bucket (directory) to upload heap dumps to. Enabling this field implies that `dump_heap_on_oom` is set to true.',
    )
    sdkContainerImage: Optional[str] = Field(
        None,
        description="Docker registry location of container image to use for the 'worker harness. Default is the container for the version of the SDK. Note this field is only valid for portable pipelines.",
    )
    serviceAccountEmail: Optional[str] = Field(
        None, description='The email address of the service account to run the job as.'
    )
    stagingLocation: Optional[str] = Field(
        None,
        description='The Cloud Storage path for staging local files. Must be a valid Cloud Storage URL, beginning with `gs://`.',
    )
    subnetwork: Optional[str] = Field(
        None,
        description='Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.',
    )
    tempLocation: Optional[str] = Field(
        None,
        description='The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.',
    )
    workerRegion: Optional[str] = Field(
        None,
        description='The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane\'s region.',
    )
    workerZone: Optional[str] = Field(
        None,
        description='The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane\'s region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.',
    )
    zone: Optional[str] = Field(
        None,
        description='The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.',
    )


class FloatingPointList(BaseModel):
    elements: Optional[List[float]] = Field(None, description='Elements of the list.')


class GetDebugConfigRequest(BaseModel):
    componentId: Optional[str] = Field(
        None,
        description='The internal component id for which debug configuration is requested.',
    )
    location: Optional[str] = Field(
        None,
        description='The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.',
    )
    workerId: Optional[str] = Field(
        None, description='The worker id, i.e., VM hostname.'
    )


class GetDebugConfigResponse(BaseModel):
    config: Optional[str] = Field(
        None, description='The encoded debug configuration for the requested component.'
    )


class TemplateType(Enum):
    UNKNOWN = 'UNKNOWN'
    LEGACY = 'LEGACY'
    FLEX = 'FLEX'


class Histogram(BaseModel):
    bucketCounts: Optional[List[str]] = Field(
        None,
        description='Counts of values in each bucket. For efficiency, prefix and trailing buckets with count = 0 are elided. Buckets can store the full range of values of an unsigned long, with ULLONG_MAX falling into the 59th bucket with range [1e19, 2e19).',
    )
    firstBucketOffset: Optional[int] = Field(
        None,
        description='Starting index of first stored bucket. The non-inclusive upper-bound of the ith bucket is given by: pow(10,(i-first_bucket_offset)/3) * (1,2,5)[(i-first_bucket_offset)%3]',
    )


class HotKeyDetection(BaseModel):
    hotKeyAge: Optional[str] = Field(
        None,
        description='The age of the hot key measured from when it was first detected.',
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of the step containing this hot key. Unique across the workflow.',
    )
    userStepName: Optional[str] = Field(
        None, description='User-provided name of the step that contains this hot key.'
    )


class HotKeyInfo(BaseModel):
    hotKeyAge: Optional[str] = Field(
        None,
        description='The age of the hot key measured from when it was first detected.',
    )
    key: Optional[str] = Field(
        None,
        description='A detected hot key that is causing limited parallelism. This field will be populated only if the following flag is set to true: "--enable_hot_key_logging".',
    )
    keyTruncated: Optional[bool] = Field(
        None,
        description='If true, then the above key is truncated and cannot be deserialized. This occurs if the key above is populated and the key size is >5MB.',
    )


class InstructionInput(BaseModel):
    outputNum: Optional[int] = Field(
        None, description='The output index (origin zero) within the producer.'
    )
    producerInstructionIndex: Optional[int] = Field(
        None,
        description="The index (origin zero) of the parallel instruction that produces the output to be consumed by this input. This index is relative to the list of instructions in this input's instruction's containing MapTask.",
    )


class InstructionOutput(BaseModel):
    codec: Optional[Dict[str, Any]] = Field(
        None,
        description='The codec to use to encode data being written via this output.',
    )
    name: Optional[str] = Field(
        None, description='The user-provided name of this output.'
    )
    onlyCountKeyBytes: Optional[bool] = Field(
        None,
        description='For system-generated byte and mean byte metrics, certain instructions should only report the key size.',
    )
    onlyCountValueBytes: Optional[bool] = Field(
        None,
        description='For system-generated byte and mean byte metrics, certain instructions should only report the value size.',
    )
    originalName: Optional[str] = Field(
        None,
        description='System-defined name for this output in the original workflow graph. Outputs that do not contribute to an original instruction do not set this.',
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of this output. Unique across the workflow.',
    )


class CurrentState(Enum):
    JOB_STATE_UNKNOWN = 'JOB_STATE_UNKNOWN'
    JOB_STATE_STOPPED = 'JOB_STATE_STOPPED'
    JOB_STATE_RUNNING = 'JOB_STATE_RUNNING'
    JOB_STATE_DONE = 'JOB_STATE_DONE'
    JOB_STATE_FAILED = 'JOB_STATE_FAILED'
    JOB_STATE_CANCELLED = 'JOB_STATE_CANCELLED'
    JOB_STATE_UPDATED = 'JOB_STATE_UPDATED'
    JOB_STATE_DRAINING = 'JOB_STATE_DRAINING'
    JOB_STATE_DRAINED = 'JOB_STATE_DRAINED'
    JOB_STATE_PENDING = 'JOB_STATE_PENDING'
    JOB_STATE_CANCELLING = 'JOB_STATE_CANCELLING'
    JOB_STATE_QUEUED = 'JOB_STATE_QUEUED'
    JOB_STATE_RESOURCE_CLEANING_UP = 'JOB_STATE_RESOURCE_CLEANING_UP'


class RequestedState(Enum):
    JOB_STATE_UNKNOWN = 'JOB_STATE_UNKNOWN'
    JOB_STATE_STOPPED = 'JOB_STATE_STOPPED'
    JOB_STATE_RUNNING = 'JOB_STATE_RUNNING'
    JOB_STATE_DONE = 'JOB_STATE_DONE'
    JOB_STATE_FAILED = 'JOB_STATE_FAILED'
    JOB_STATE_CANCELLED = 'JOB_STATE_CANCELLED'
    JOB_STATE_UPDATED = 'JOB_STATE_UPDATED'
    JOB_STATE_DRAINING = 'JOB_STATE_DRAINING'
    JOB_STATE_DRAINED = 'JOB_STATE_DRAINED'
    JOB_STATE_PENDING = 'JOB_STATE_PENDING'
    JOB_STATE_CANCELLING = 'JOB_STATE_CANCELLING'
    JOB_STATE_QUEUED = 'JOB_STATE_QUEUED'
    JOB_STATE_RESOURCE_CLEANING_UP = 'JOB_STATE_RESOURCE_CLEANING_UP'


class Type(Enum):
    JOB_TYPE_UNKNOWN = 'JOB_TYPE_UNKNOWN'
    JOB_TYPE_BATCH = 'JOB_TYPE_BATCH'
    JOB_TYPE_STREAMING = 'JOB_TYPE_STREAMING'


class JobExecutionStageInfo(BaseModel):
    stepName: Optional[List[str]] = Field(
        None,
        description='The steps associated with the execution stage. Note that stages may have several steps, and that a given step might be run by more than one stage.',
    )


class MessageImportance(Enum):
    JOB_MESSAGE_IMPORTANCE_UNKNOWN = 'JOB_MESSAGE_IMPORTANCE_UNKNOWN'
    JOB_MESSAGE_DEBUG = 'JOB_MESSAGE_DEBUG'
    JOB_MESSAGE_DETAILED = 'JOB_MESSAGE_DETAILED'
    JOB_MESSAGE_BASIC = 'JOB_MESSAGE_BASIC'
    JOB_MESSAGE_WARNING = 'JOB_MESSAGE_WARNING'
    JOB_MESSAGE_ERROR = 'JOB_MESSAGE_ERROR'


class JobMessage(BaseModel):
    id: Optional[str] = Field(None, description='Deprecated.')
    messageImportance: Optional[MessageImportance] = Field(
        None, description='Importance level of the message.'
    )
    messageText: Optional[str] = Field(None, description='The text of the message.')
    time: Optional[str] = Field(None, description='The timestamp of the message.')


class KeyRangeDataDiskAssignment(BaseModel):
    dataDisk: Optional[str] = Field(
        None,
        description='The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".',
    )
    end: Optional[str] = Field(
        None, description='The end (exclusive) of the key range.'
    )
    start: Optional[str] = Field(
        None, description='The start (inclusive) of the key range.'
    )


class KeyRangeLocation(BaseModel):
    dataDisk: Optional[str] = Field(
        None,
        description='The name of the data disk where data for this range is stored. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".',
    )
    deliveryEndpoint: Optional[str] = Field(
        None,
        description='The physical location of this range assignment to be used for streaming computation cross-worker message delivery.',
    )
    deprecatedPersistentDirectory: Optional[str] = Field(
        None,
        description='DEPRECATED. The location of the persistent state for this range, as a persistent directory in the worker local filesystem.',
    )
    end: Optional[str] = Field(
        None, description='The end (exclusive) of the key range.'
    )
    start: Optional[str] = Field(
        None, description='The start (inclusive) of the key range.'
    )


class LeaseWorkItemRequest(BaseModel):
    currentWorkerTime: Optional[str] = Field(
        None, description='The current timestamp at the worker.'
    )
    location: Optional[str] = Field(
        None,
        description="The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.",
    )
    requestedLeaseDuration: Optional[str] = Field(
        None, description='The initial lease period.'
    )
    unifiedWorkerRequest: Optional[Dict[str, Any]] = Field(
        None, description='Untranslated bag-of-bytes WorkRequest from UnifiedWorker.'
    )
    workItemTypes: Optional[List[str]] = Field(
        None, description='Filter for WorkItem type.'
    )
    workerCapabilities: Optional[List[str]] = Field(
        None,
        description='Worker capabilities. WorkItems might be limited to workers with specific capabilities.',
    )
    workerId: Optional[str] = Field(
        None,
        description='Identifies the worker leasing work -- typically the ID of the virtual machine running the worker.',
    )


class MemInfo(BaseModel):
    currentLimitBytes: Optional[str] = Field(
        None, description='Instantenous memory limit in bytes.'
    )
    currentOoms: Optional[str] = Field(
        None,
        description='Number of Out of Memory (OOM) events recorded since the previous measurement.',
    )
    currentRssBytes: Optional[str] = Field(
        None, description='Instantenous memory (RSS) size in bytes.'
    )
    timestamp: Optional[str] = Field(None, description='Timestamp of the measurement.')
    totalGbMs: Optional[str] = Field(
        None, description='Total memory (RSS) usage since start up in GB * ms.'
    )


class MetricShortId(BaseModel):
    metricIndex: Optional[int] = Field(
        None,
        description='The index of the corresponding metric in the ReportWorkItemStatusRequest. Required.',
    )
    shortId: Optional[str] = Field(
        None, description='The service-generated short identifier for the metric.'
    )


class MetricStructuredName(BaseModel):
    context: Optional[Dict[str, str]] = Field(
        None,
        description="Zero or more labeled fields which identify the part of the job this metric is associated with, such as the name of a step or collection. For example, built-in counters associated with steps will have context['step'] = . Counters associated with PCollections in the SDK will have context['pcollection'] = .",
    )
    name: Optional[str] = Field(None, description='Worker-defined metric name.')
    origin: Optional[str] = Field(
        None,
        description='Origin (namespace) of metric name. May be blank for user-define metrics; will be "dataflow" for metrics defined by the Dataflow service or SDK.',
    )


class MetricUpdate(BaseModel):
    cumulative: Optional[bool] = Field(
        None,
        description='True if this metric is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this metric is reported as a delta that is not associated with any WorkItem.',
    )
    distribution: Optional[Any] = Field(
        None,
        description='A struct value describing properties of a distribution of numeric values.',
    )
    gauge: Optional[Any] = Field(
        None,
        description='A struct value describing properties of a Gauge. Metrics of gauge type show the value of a metric across time, and is aggregated based on the newest value.',
    )
    internal: Optional[Any] = Field(
        None,
        description='Worker-computed aggregate value for internal use by the Dataflow service.',
    )
    kind: Optional[str] = Field(
        None,
        description='Metric aggregation kind. The possible metric aggregation kinds are "Sum", "Max", "Min", "Mean", "Set", "And", "Or", and "Distribution". The specified aggregation kind is case-insensitive. If omitted, this is not an aggregated value but instead a single metric sample value.',
    )
    meanCount: Optional[Any] = Field(
        None,
        description='Worker-computed aggregate value for the "Mean" aggregation kind. This holds the count of the aggregated values and is used in combination with mean_sum above to obtain the actual mean aggregate value. The only possible value type is Long.',
    )
    meanSum: Optional[Any] = Field(
        None,
        description='Worker-computed aggregate value for the "Mean" aggregation kind. This holds the sum of the aggregated values and is used in combination with mean_count below to obtain the actual mean aggregate value. The only possible value types are Long and Double.',
    )
    name: Optional[MetricStructuredName] = Field(
        None, description='Name of the metric.'
    )
    scalar: Optional[Any] = Field(
        None,
        description='Worker-computed aggregate value for aggregation kinds "Sum", "Max", "Min", "And", and "Or". The possible value types are Long, Double, and Boolean.',
    )
    set: Optional[Any] = Field(
        None,
        description='Worker-computed aggregate value for the "Set" aggregation kind. The only possible value type is a list of Values whose type can be Long, Double, or String, according to the metric\'s type. All Values in the list must be of the same type.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Timestamp associated with the metric value. Optional when workers are reporting work progress; it will be filled in responses from the metrics API.',
    )


class MountedDataDisk(BaseModel):
    dataDisk: Optional[str] = Field(
        None,
        description='The name of the data disk. This name is local to the Google Cloud Platform project and uniquely identifies the disk within that project, for example "myproject-1014-104817-4c2-harness-0-disk-1".',
    )


class MultiOutputInfo(BaseModel):
    tag: Optional[str] = Field(
        None,
        description='The id of the tag the user code will emit to this output by; this should correspond to the tag of some SideInputInfo.',
    )


class Kind2(Enum):
    INVALID = 'INVALID'
    SUM = 'SUM'
    MAX = 'MAX'
    MIN = 'MIN'
    MEAN = 'MEAN'
    OR = 'OR'
    AND = 'AND'
    SET = 'SET'
    DISTRIBUTION = 'DISTRIBUTION'
    LATEST_VALUE = 'LATEST_VALUE'


class NameAndKind(BaseModel):
    kind: Optional[Kind2] = Field(None, description='Counter aggregation kind.')
    name: Optional[str] = Field(None, description='Name of the counter.')


class Package(BaseModel):
    location: Optional[str] = Field(
        None,
        description='The resource to read the package from. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket} bucket.storage.googleapis.com/',
    )
    name: Optional[str] = Field(None, description='The name of the package.')


class Parameter(BaseModel):
    key: Optional[str] = Field(None, description='Key or name for this parameter.')
    value: Optional[Any] = Field(None, description='Value for this parameter.')


class ParamType(Enum):
    DEFAULT = 'DEFAULT'
    TEXT = 'TEXT'
    GCS_READ_BUCKET = 'GCS_READ_BUCKET'
    GCS_WRITE_BUCKET = 'GCS_WRITE_BUCKET'
    GCS_READ_FILE = 'GCS_READ_FILE'
    GCS_WRITE_FILE = 'GCS_WRITE_FILE'
    GCS_READ_FOLDER = 'GCS_READ_FOLDER'
    GCS_WRITE_FOLDER = 'GCS_WRITE_FOLDER'
    PUBSUB_TOPIC = 'PUBSUB_TOPIC'
    PUBSUB_SUBSCRIPTION = 'PUBSUB_SUBSCRIPTION'
    BIGQUERY_TABLE = 'BIGQUERY_TABLE'
    JAVASCRIPT_UDF_FILE = 'JAVASCRIPT_UDF_FILE'


class ParameterMetadata(BaseModel):
    customMetadata: Optional[Dict[str, str]] = Field(
        None, description='Optional. Additional metadata for describing this parameter.'
    )
    groupName: Optional[str] = Field(
        None,
        description='Optional. Specifies a group name for this parameter to be rendered under. Group header text will be rendered exactly as specified in this field. Only considered when parent_name is NOT provided.',
    )
    helpText: Optional[str] = Field(
        None, description='Required. The help text to display for the parameter.'
    )
    isOptional: Optional[bool] = Field(
        None,
        description='Optional. Whether the parameter is optional. Defaults to false.',
    )
    label: Optional[str] = Field(
        None, description='Required. The label to display for the parameter.'
    )
    name: Optional[str] = Field(
        None, description='Required. The name of the parameter.'
    )
    paramType: Optional[ParamType] = Field(
        None,
        description='Optional. The type of the parameter. Used for selecting input picker.',
    )
    parentName: Optional[str] = Field(
        None,
        description="Optional. Specifies the name of the parent parameter. Used in conjunction with 'parent_trigger_values' to make this parameter conditional (will only be rendered conditionally). Should be mappable to a ParameterMetadata.name field.",
    )
    parentTriggerValues: Optional[List[str]] = Field(
        None,
        description="Optional. The value(s) of the 'parent_name' parameter which will trigger this parameter to be shown. If left empty, ANY non-empty value in parent_name will trigger this parameter to be shown. Only considered when this parameter is conditional (when 'parent_name' has been provided).",
    )
    regexes: Optional[List[str]] = Field(
        None, description='Optional. Regexes that the parameter must match.'
    )


class Point(BaseModel):
    time: Optional[str] = Field(None, description='The timestamp of the point.')
    value: Optional[float] = Field(None, description='The value of the point.')


class ProgressTimeseries(BaseModel):
    currentProgress: Optional[float] = Field(
        None, description='The current progress of the component, in the range [0,1].'
    )
    dataPoints: Optional[List[Point]] = Field(
        None,
        description='History of progress for the component. Points are sorted by time.',
    )


class PubSubIODetails(BaseModel):
    subscription: Optional[str] = Field(
        None, description='Subscription used in the connection.'
    )
    topic: Optional[str] = Field(None, description='Topic accessed in the connection.')


class PubsubLocation(BaseModel):
    dropLateData: Optional[bool] = Field(
        None, description='Indicates whether the pipeline allows late-arriving data.'
    )
    idLabel: Optional[str] = Field(
        None,
        description='If set, contains a pubsub label from which to extract record ids. If left empty, record deduplication will be strictly best effort.',
    )
    subscription: Optional[str] = Field(
        None,
        description='A pubsub subscription, in the form of "pubsub.googleapis.com/subscriptions//"',
    )
    timestampLabel: Optional[str] = Field(
        None,
        description='If set, contains a pubsub label from which to extract record timestamps. If left empty, record timestamps will be generated upon arrival.',
    )
    topic: Optional[str] = Field(
        None,
        description='A pubsub topic, in the form of "pubsub.googleapis.com/topics//"',
    )
    trackingSubscription: Optional[str] = Field(
        None,
        description='If set, specifies the pubsub subscription that will be used for tracking custom time timestamps for watermark estimation.',
    )
    withAttributes: Optional[bool] = Field(
        None,
        description='If true, then the client has requested to get pubsub attributes.',
    )


class PubsubSnapshotMetadata(BaseModel):
    expireTime: Optional[str] = Field(
        None, description='The expire time of the Pubsub snapshot.'
    )
    snapshotName: Optional[str] = Field(
        None, description='The name of the Pubsub snapshot.'
    )
    topicName: Optional[str] = Field(None, description='The name of the Pubsub topic.')


class ReportedParallelism(BaseModel):
    isInfinite: Optional[bool] = Field(
        None,
        description='Specifies whether the parallelism is infinite. If true, "value" is ignored. Infinite parallelism means the service will assume that the work item can always be split into more non-empty work items by dynamic splitting. This is a work-around for lack of support for infinity by the current JSON-based Java RPC stack.',
    )
    value: Optional[float] = Field(
        None, description='Specifies the level of parallelism in case it is finite.'
    )


class ResourceUtilizationReport(BaseModel):
    containers: Optional[Dict[str, ResourceUtilizationReport]] = Field(
        None, description='Per container information. Key: container name.'
    )
    cpuTime: Optional[List[CPUTime]] = Field(
        None, description='CPU utilization samples.'
    )
    memoryInfo: Optional[List[MemInfo]] = Field(
        None, description='Memory utilization samples.'
    )


class ResourceUtilizationReportResponse(BaseModel):
    pass


class RuntimeEnvironment(BaseModel):
    additionalExperiments: Optional[List[str]] = Field(
        None,
        description='Optional. Additional experiment flags for the job, specified with the `--experiments` option.',
    )
    additionalUserLabels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Additional user labels to be specified for the job. Keys and values should follow the restrictions specified in the [labeling restrictions](https://cloud.google.com/compute/docs/labeling-resources#restrictions) page. An object containing a list of "key": value pairs. Example: { "name": "wrench", "mass": "1kg", "count": "3" }.',
    )
    bypassTempDirValidation: Optional[bool] = Field(
        None,
        description="Optional. Whether to bypass the safety checks for the job's temporary directory. Use with caution.",
    )
    enableStreamingEngine: Optional[bool] = Field(
        None, description='Optional. Whether to enable Streaming Engine for the job.'
    )
    ipConfiguration: Optional[IpConfiguration] = Field(
        None, description='Optional. Configuration for VM IPs.'
    )
    kmsKeyName: Optional[str] = Field(
        None,
        description='Optional. Name for the Cloud KMS key for the job. Key format is: projects//locations//keyRings//cryptoKeys/',
    )
    machineType: Optional[str] = Field(
        None,
        description='Optional. The machine type to use for the job. Defaults to the value from the template if not specified.',
    )
    maxWorkers: Optional[int] = Field(
        None,
        description='Optional. The maximum number of Google Compute Engine instances to be made available to your pipeline during execution, from 1 to 1000. The default value is 1.',
    )
    network: Optional[str] = Field(
        None,
        description='Optional. Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".',
    )
    numWorkers: Optional[int] = Field(
        None,
        description='Optional. The initial number of Google Compute Engine instances for the job. The default value is 11.',
    )
    serviceAccountEmail: Optional[str] = Field(
        None,
        description='Optional. The email address of the service account to run the job as.',
    )
    subnetwork: Optional[str] = Field(
        None,
        description='Optional. Subnetwork to which VMs will be assigned, if desired. You can specify a subnetwork using either a complete URL or an abbreviated path. Expected to be of the form "https://www.googleapis.com/compute/v1/projects/HOST_PROJECT_ID/regions/REGION/subnetworks/SUBNETWORK" or "regions/REGION/subnetworks/SUBNETWORK". If the subnetwork is located in a Shared VPC network, you must use the complete URL.',
    )
    tempLocation: Optional[str] = Field(
        None,
        description='Required. The Cloud Storage path to use for temporary files. Must be a valid Cloud Storage URL, beginning with `gs://`.',
    )
    workerRegion: Optional[str] = Field(
        None,
        description='Required. The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane\'s region.',
    )
    workerZone: Optional[str] = Field(
        None,
        description='Optional. The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane\'s region is chosen based on available capacity. If both `worker_zone` and `zone` are set, `worker_zone` takes precedence.',
    )
    zone: Optional[str] = Field(
        None,
        description='Optional. The Compute Engine [availability zone](https://cloud.google.com/compute/docs/regions-zones/regions-zones) for launching worker instances to run your pipeline. In the future, worker_zone will take precedence.',
    )


class Language(Enum):
    UNKNOWN = 'UNKNOWN'
    JAVA = 'JAVA'
    PYTHON = 'PYTHON'
    GO = 'GO'


class SDKInfo(BaseModel):
    language: Optional[Language] = Field(
        None, description='Required. The SDK Language.'
    )
    version: Optional[str] = Field(None, description='Optional. The SDK version.')


class SdkHarnessContainerImage(BaseModel):
    capabilities: Optional[List[str]] = Field(
        None,
        description='The set of capabilities enumerated in the above Environment proto. See also [beam_runner_api.proto](https://github.com/apache/beam/blob/master/model/pipeline/src/main/proto/org/apache/beam/model/pipeline/v1/beam_runner_api.proto)',
    )
    containerImage: Optional[str] = Field(
        None,
        description='A docker container image that resides in Google Container Registry.',
    )
    environmentId: Optional[str] = Field(
        None,
        description='Environment ID for the Beam runner API proto Environment that corresponds to the current SDK Harness.',
    )
    useSingleCorePerContainer: Optional[bool] = Field(
        None,
        description='If true, recommends the Dataflow service to use only one core per SDK container instance with this image. If false (or unset) recommends using more than one core per SDK container instance with this image for efficiency. Note that Dataflow service may choose to override this property if needed.',
    )


class SdkSupportStatus(Enum):
    UNKNOWN = 'UNKNOWN'
    SUPPORTED = 'SUPPORTED'
    STALE = 'STALE'
    DEPRECATED = 'DEPRECATED'
    UNSUPPORTED = 'UNSUPPORTED'


class SdkVersion(BaseModel):
    sdkSupportStatus: Optional[SdkSupportStatus] = Field(
        None, description='The support status for this SDK version.'
    )
    version: Optional[str] = Field(
        None, description='The version of the SDK used to run the job.'
    )
    versionDisplayName: Optional[str] = Field(
        None, description='A readable string describing the version of the SDK.'
    )


class DataFormat(Enum):
    DATA_FORMAT_UNSPECIFIED = 'DATA_FORMAT_UNSPECIFIED'
    RAW = 'RAW'
    JSON = 'JSON'
    ZLIB = 'ZLIB'
    BROTLI = 'BROTLI'


class SendDebugCaptureRequest(BaseModel):
    componentId: Optional[str] = Field(
        None,
        description='The internal component id for which debug information is sent.',
    )
    data: Optional[str] = Field(None, description='The encoded debug information.')
    dataFormat: Optional[DataFormat] = Field(
        None, description='Format for the data field above (id=5).'
    )
    location: Optional[str] = Field(
        None,
        description='The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job specified by job_id.',
    )
    workerId: Optional[str] = Field(
        None, description='The worker id, i.e., VM hostname.'
    )


class SendDebugCaptureResponse(BaseModel):
    pass


class ShellTask(BaseModel):
    command: Optional[str] = Field(None, description='The shell command to run.')
    exitCode: Optional[int] = Field(None, description='Exit code for the task.')


class Sink(BaseModel):
    codec: Optional[Dict[str, Any]] = Field(
        None, description='The codec to use to encode data written to the sink.'
    )
    spec: Optional[Dict[str, Any]] = Field(
        None, description='The sink to write to, plus its parameters.'
    )


class State(Enum):
    UNKNOWN_SNAPSHOT_STATE = 'UNKNOWN_SNAPSHOT_STATE'
    PENDING = 'PENDING'
    RUNNING = 'RUNNING'
    READY = 'READY'
    FAILED = 'FAILED'
    DELETED = 'DELETED'


class Snapshot(BaseModel):
    creationTime: Optional[str] = Field(
        None, description='The time this snapshot was created.'
    )
    description: Optional[str] = Field(
        None, description='User specified description of the snapshot. Maybe empty.'
    )
    diskSizeBytes: Optional[str] = Field(
        None,
        description='The disk byte size of the snapshot. Only available for snapshots in READY state.',
    )
    id: Optional[str] = Field(None, description='The unique ID of this snapshot.')
    projectId: Optional[str] = Field(
        None, description='The project this snapshot belongs to.'
    )
    pubsubMetadata: Optional[List[PubsubSnapshotMetadata]] = Field(
        None, description='Pub/Sub snapshot metadata.'
    )
    region: Optional[str] = Field(
        None,
        description='Cloud region where this snapshot lives in, e.g., "us-central1".',
    )
    sourceJobId: Optional[str] = Field(
        None, description='The job this snapshot was created from.'
    )
    state: Optional[State] = Field(None, description='State of the snapshot.')
    ttl: Optional[str] = Field(
        None,
        description='The time after which this snapshot will be automatically deleted.',
    )


class SnapshotJobRequest(BaseModel):
    description: Optional[str] = Field(
        None, description='User specified description of the snapshot. Maybe empty.'
    )
    location: Optional[str] = Field(
        None, description='The location that contains this job.'
    )
    snapshotSources: Optional[bool] = Field(
        None, description='If true, perform snapshots for sources which support this.'
    )
    ttl: Optional[str] = Field(None, description='TTL for the snapshot.')


class SourceMetadata(BaseModel):
    estimatedSizeBytes: Optional[str] = Field(
        None,
        description='An estimate of the total size (in bytes) of the data that would be read from this source. This estimate is in terms of external storage size, before any decompression or other processing done by the reader.',
    )
    infinite: Optional[bool] = Field(
        None,
        description='Specifies that the size of this source is known to be infinite (this is a streaming source).',
    )
    producesSortedKeys: Optional[bool] = Field(
        None,
        description='Whether this source is known to produce key/value pairs with the (encoded) keys in lexicographically sorted order.',
    )


class SourceSplitOptions(BaseModel):
    desiredBundleSizeBytes: Optional[str] = Field(
        None,
        description='The source should be split into a set of bundles where the estimated size of each is approximately this many bytes.',
    )
    desiredShardSizeBytes: Optional[str] = Field(
        None, description='DEPRECATED in favor of desired_bundle_size_bytes.'
    )


class Outcome(Enum):
    SOURCE_SPLIT_OUTCOME_UNKNOWN = 'SOURCE_SPLIT_OUTCOME_UNKNOWN'
    SOURCE_SPLIT_OUTCOME_USE_CURRENT = 'SOURCE_SPLIT_OUTCOME_USE_CURRENT'
    SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED = 'SOURCE_SPLIT_OUTCOME_SPLITTING_HAPPENED'


class SpannerIODetails(BaseModel):
    databaseId: Optional[str] = Field(
        None, description='DatabaseId accessed in the connection.'
    )
    instanceId: Optional[str] = Field(
        None, description='InstanceId accessed in the connection.'
    )
    projectId: Optional[str] = Field(
        None, description='ProjectId accessed in the connection.'
    )


class SplitInt64(BaseModel):
    highBits: Optional[int] = Field(
        None, description='The high order bits, including the sign: n >> 32.'
    )
    lowBits: Optional[int] = Field(
        None, description='The low order bits: n & 0xffffffff.'
    )


class StageSource(BaseModel):
    name: Optional[str] = Field(
        None, description='Dataflow service generated name for this source.'
    )
    originalTransformOrCollection: Optional[str] = Field(
        None,
        description='User name for the original user transform or collection with which this source is most closely associated.',
    )
    sizeBytes: Optional[str] = Field(
        None, description='Size of the source, if measurable.'
    )
    userName: Optional[str] = Field(
        None,
        description='Human-readable name for this source; may be user or system generated.',
    )


class State1(Enum):
    EXECUTION_STATE_UNKNOWN = 'EXECUTION_STATE_UNKNOWN'
    EXECUTION_STATE_NOT_STARTED = 'EXECUTION_STATE_NOT_STARTED'
    EXECUTION_STATE_RUNNING = 'EXECUTION_STATE_RUNNING'
    EXECUTION_STATE_SUCCEEDED = 'EXECUTION_STATE_SUCCEEDED'
    EXECUTION_STATE_FAILED = 'EXECUTION_STATE_FAILED'
    EXECUTION_STATE_CANCELLED = 'EXECUTION_STATE_CANCELLED'


class StateFamilyConfig(BaseModel):
    isRead: Optional[bool] = Field(
        None, description='If true, this family corresponds to a read operation.'
    )
    stateFamily: Optional[str] = Field(None, description='The state family value.')


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Step(BaseModel):
    kind: Optional[str] = Field(
        None, description='The kind of step in the Cloud Dataflow job.'
    )
    name: Optional[str] = Field(
        None,
        description='The name that identifies the step. This must be unique for each step with respect to all other steps in the Cloud Dataflow job.',
    )
    properties: Optional[Dict[str, Any]] = Field(
        None,
        description='Named properties associated with the step. Each kind of predefined step has its own required set of properties. Must be provided on Create. Only retrieved with JOB_VIEW_ALL.',
    )


class StreamingApplianceSnapshotConfig(BaseModel):
    importStateEndpoint: Optional[str] = Field(
        None, description='Indicates which endpoint is used to import appliance state.'
    )
    snapshotId: Optional[str] = Field(
        None,
        description='If set, indicates the snapshot id for the snapshot being performed.',
    )


class StreamingComputationRanges(BaseModel):
    computationId: Optional[str] = Field(None, description='The ID of the computation.')
    rangeAssignments: Optional[List[KeyRangeDataDiskAssignment]] = Field(
        None, description='Data disk assignments for ranges from this computation.'
    )


class TaskType(Enum):
    STREAMING_COMPUTATION_TASK_UNKNOWN = 'STREAMING_COMPUTATION_TASK_UNKNOWN'
    STREAMING_COMPUTATION_TASK_STOP = 'STREAMING_COMPUTATION_TASK_STOP'
    STREAMING_COMPUTATION_TASK_START = 'STREAMING_COMPUTATION_TASK_START'


class StreamingComputationTask(BaseModel):
    computationRanges: Optional[List[StreamingComputationRanges]] = Field(
        None,
        description='Contains ranges of a streaming computation this task should apply to.',
    )
    dataDisks: Optional[List[MountedDataDisk]] = Field(
        None, description='Describes the set of data disks this task should apply to.'
    )
    taskType: Optional[TaskType] = Field(
        None, description='A type of streaming computation task.'
    )


class StreamingSideInputLocation(BaseModel):
    stateFamily: Optional[str] = Field(
        None, description='Identifies the state family where this side input is stored.'
    )
    tag: Optional[str] = Field(
        None,
        description='Identifies the particular side input within the streaming Dataflow job.',
    )


class StreamingStageLocation(BaseModel):
    streamId: Optional[str] = Field(
        None,
        description='Identifies the particular stream within the streaming Dataflow job.',
    )


class StreamingStragglerInfo(BaseModel):
    dataWatermarkLag: Optional[str] = Field(
        None,
        description='The event-time watermark lag at the time of the straggler detection.',
    )
    endTime: Optional[str] = Field(None, description='End time of this straggler.')
    startTime: Optional[str] = Field(None, description='Start time of this straggler.')
    systemWatermarkLag: Optional[str] = Field(
        None,
        description='The system watermark lag at the time of the straggler detection.',
    )
    workerName: Optional[str] = Field(
        None, description='Name of the worker where the straggler was detected.'
    )


class StringList(BaseModel):
    elements: Optional[List[str]] = Field(None, description='Elements of the list.')


class StructuredMessage(BaseModel):
    messageKey: Optional[str] = Field(
        None,
        description='Identifier for this message type. Used by external systems to internationalize or personalize message.',
    )
    messageText: Optional[str] = Field(
        None, description='Human-readable version of message.'
    )
    parameters: Optional[List[Parameter]] = Field(
        None, description='The structured data associated with this message.'
    )


class TemplateMetadata(BaseModel):
    description: Optional[str] = Field(
        None, description='Optional. A description of the template.'
    )
    name: Optional[str] = Field(None, description='Required. The name of the template.')
    parameters: Optional[List[ParameterMetadata]] = Field(
        None, description='The parameters for the template.'
    )


class Kind3(Enum):
    UNKNOWN_KIND = 'UNKNOWN_KIND'
    PAR_DO_KIND = 'PAR_DO_KIND'
    GROUP_BY_KEY_KIND = 'GROUP_BY_KEY_KIND'
    FLATTEN_KIND = 'FLATTEN_KIND'
    READ_KIND = 'READ_KIND'
    WRITE_KIND = 'WRITE_KIND'
    CONSTANT_KIND = 'CONSTANT_KIND'
    SINGLETON_KIND = 'SINGLETON_KIND'
    SHUFFLE_KIND = 'SHUFFLE_KIND'


class TransformSummary(BaseModel):
    displayData: Optional[List[DisplayData]] = Field(
        None, description='Transform-specific display data.'
    )
    id: Optional[str] = Field(
        None, description='SDK generated id of this transform instance.'
    )
    inputCollectionName: Optional[List[str]] = Field(
        None, description='User names for all collection inputs to this transform.'
    )
    kind: Optional[Kind3] = Field(None, description='Type of transform.')
    name: Optional[str] = Field(
        None, description='User provided name for this transform instance.'
    )
    outputCollectionName: Optional[List[str]] = Field(
        None, description='User names for all collection outputs to this transform.'
    )


class WorkerHealthReport(BaseModel):
    msg: Optional[str] = Field(
        None, description='Message describing any unusual health reports.'
    )
    pods: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='The pods running on the worker. See: http://kubernetes.io/v1.1/docs/api-reference/v1/definitions.html#_v1_pod This field is used by the worker to send the status of the indvidual containers running on each worker.',
    )
    reportInterval: Optional[str] = Field(
        None,
        description='The interval at which the worker is sending health reports. The default value of 0 should be interpreted as the field is not being explicitly set by the worker.',
    )
    vmBrokenCode: Optional[str] = Field(
        None,
        description='Code to describe a specific reason, if known, that a VM has reported broken state.',
    )
    vmIsBroken: Optional[bool] = Field(
        None,
        description='Whether the VM is in a permanently broken state. Broken VMs should be abandoned or deleted ASAP to avoid assigning or completing any work.',
    )
    vmIsHealthy: Optional[bool] = Field(
        None, description='Whether the VM is currently healthy.'
    )
    vmStartupTime: Optional[str] = Field(
        None, description='The time the VM was booted.'
    )


class WorkerHealthReportResponse(BaseModel):
    reportInterval: Optional[str] = Field(
        None,
        description='A positive value indicates the worker should change its reporting interval to the specified value. The default value of zero means no change in report rate is requested by the server.',
    )


class Event(Enum):
    UNKNOWN_EVENT = 'UNKNOWN_EVENT'
    OS_START = 'OS_START'
    CONTAINER_START = 'CONTAINER_START'
    NETWORK_UP = 'NETWORK_UP'
    STAGING_FILES_DOWNLOAD_START = 'STAGING_FILES_DOWNLOAD_START'
    STAGING_FILES_DOWNLOAD_FINISH = 'STAGING_FILES_DOWNLOAD_FINISH'
    SDK_INSTALL_START = 'SDK_INSTALL_START'
    SDK_INSTALL_FINISH = 'SDK_INSTALL_FINISH'


class WorkerLifecycleEvent(BaseModel):
    containerStartTime: Optional[str] = Field(
        None,
        description='The start time of this container. All events will report this so that events can be grouped together across container/VM restarts.',
    )
    event: Optional[Event] = Field(None, description='The event being reported.')
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Other stats that can accompany an event. E.g. { "downloaded_bytes" : "123456" }',
    )


class WorkerMessageCode(BaseModel):
    code: Optional[str] = Field(
        None,
        description='The code is a string intended for consumption by a machine that identifies the type of message being sent. Examples: 1. "HARNESS_STARTED" might be used to indicate the worker harness has started. 2. "GCS_DOWNLOAD_ERROR" might be used to indicate an error downloading a Cloud Storage file as part of the boot process of one of the worker containers. This is a string and not an enum to make it easy to add new codes without waiting for an API change.',
    )
    parameters: Optional[Dict[str, Any]] = Field(
        None,
        description='Parameters contains specific information about the code. This is a struct to allow parameters of different types. Examples: 1. For a "HARNESS_STARTED" message parameters might provide the name of the worker and additional data like timing information. 2. For a "GCS_DOWNLOAD_ERROR" parameters might contain fields listing the Cloud Storage objects being downloaded and fields containing errors. In general complex data structures should be avoided. If a worker needs to send a specific and complicated data structure then please consider defining a new proto and adding it to the data oneof in WorkerMessageResponse. Conventions: Parameters should only be used for information that isn\'t typically passed as a label. hostname and other worker identifiers should almost always be passed as labels since they will be included on most messages.',
    )


class DefaultPackageSet(Enum):
    DEFAULT_PACKAGE_SET_UNKNOWN = 'DEFAULT_PACKAGE_SET_UNKNOWN'
    DEFAULT_PACKAGE_SET_NONE = 'DEFAULT_PACKAGE_SET_NONE'
    DEFAULT_PACKAGE_SET_JAVA = 'DEFAULT_PACKAGE_SET_JAVA'
    DEFAULT_PACKAGE_SET_PYTHON = 'DEFAULT_PACKAGE_SET_PYTHON'


class TeardownPolicy(Enum):
    TEARDOWN_POLICY_UNKNOWN = 'TEARDOWN_POLICY_UNKNOWN'
    TEARDOWN_ALWAYS = 'TEARDOWN_ALWAYS'
    TEARDOWN_ON_SUCCESS = 'TEARDOWN_ON_SUCCESS'
    TEARDOWN_NEVER = 'TEARDOWN_NEVER'


class WorkerSettings(BaseModel):
    baseUrl: Optional[str] = Field(
        None,
        description='The base URL for accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"',
    )
    reportingEnabled: Optional[bool] = Field(
        None, description='Whether to send work progress updates to the service.'
    )
    servicePath: Optional[str] = Field(
        None,
        description='The Cloud Dataflow service path relative to the root URL, for example, "dataflow/v1b3/projects".',
    )
    shuffleServicePath: Optional[str] = Field(
        None,
        description='The Shuffle service path relative to the root URL, for example, "shuffle/v1beta1".',
    )
    tempStoragePrefix: Optional[str] = Field(
        None,
        description='The prefix of the resources the system should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}',
    )
    workerId: Optional[str] = Field(
        None, description='The ID of the worker running this pipeline.'
    )


class WorkerShutdownNotice(BaseModel):
    reason: Optional[str] = Field(
        None,
        description='The reason for the worker shutdown. Current possible values are: "UNKNOWN": shutdown reason is unknown. "PREEMPTION": shutdown reason is preemption. Other possible reasons may be added in the future.',
    )


class WorkerShutdownNoticeResponse(BaseModel):
    pass


class WorkerThreadScalingReport(BaseModel):
    currentThreadCount: Optional[int] = Field(
        None, description='Current number of active threads in a worker.'
    )


class WorkerThreadScalingReportResponse(BaseModel):
    recommendedThreadCount: Optional[int] = Field(
        None, description='Recommended number of threads for a worker.'
    )


class WriteInstruction(BaseModel):
    input: Optional[InstructionInput] = Field(None, description='The input.')
    sink: Optional[Sink] = Field(None, description='The sink to write to.')


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class Filter(Enum):
    UNKNOWN = 'UNKNOWN'
    ALL = 'ALL'
    TERMINATED = 'TERMINATED'
    ACTIVE = 'ACTIVE'


class View(Enum):
    JOB_VIEW_UNKNOWN = 'JOB_VIEW_UNKNOWN'
    JOB_VIEW_SUMMARY = 'JOB_VIEW_SUMMARY'
    JOB_VIEW_ALL = 'JOB_VIEW_ALL'
    JOB_VIEW_DESCRIPTION = 'JOB_VIEW_DESCRIPTION'


class MinimumImportance(Enum):
    JOB_MESSAGE_IMPORTANCE_UNKNOWN = 'JOB_MESSAGE_IMPORTANCE_UNKNOWN'
    JOB_MESSAGE_DEBUG = 'JOB_MESSAGE_DEBUG'
    JOB_MESSAGE_DETAILED = 'JOB_MESSAGE_DETAILED'
    JOB_MESSAGE_BASIC = 'JOB_MESSAGE_BASIC'
    JOB_MESSAGE_WARNING = 'JOB_MESSAGE_WARNING'
    JOB_MESSAGE_ERROR = 'JOB_MESSAGE_ERROR'


class View14(Enum):
    METADATA_ONLY = 'METADATA_ONLY'


class AutoscalingEvent(BaseModel):
    currentNumWorkers: Optional[str] = Field(
        None, description='The current number of workers the job has.'
    )
    description: Optional[StructuredMessage] = Field(
        None,
        description='A message describing why the system decided to adjust the current number of workers, why it failed, or why the system decided to not make any changes to the number of workers.',
    )
    eventType: Optional[EventType] = Field(
        None, description='The type of autoscaling event to report.'
    )
    targetNumWorkers: Optional[str] = Field(
        None,
        description='The target number of workers the worker pool wants to resize to use.',
    )
    time: Optional[str] = Field(
        None,
        description='The time this event was emitted to indicate a new target or current num_workers value.',
    )
    workerPool: Optional[str] = Field(
        None,
        description='A short and friendly name for the worker pool this event refers to.',
    )


class ContainerSpec(BaseModel):
    defaultEnvironment: Optional[FlexTemplateRuntimeEnvironment] = Field(
        None, description='Default runtime environment for the job.'
    )
    image: Optional[str] = Field(
        None,
        description='Name of the docker container image. E.g., gcr.io/project/some-image',
    )
    imageRepositoryCertPath: Optional[str] = Field(
        None,
        description='Cloud Storage path to self-signed certificate of private registry.',
    )
    imageRepositoryPasswordSecretId: Optional[str] = Field(
        None,
        description='Secret Manager secret id for password to authenticate to private registry.',
    )
    imageRepositoryUsernameSecretId: Optional[str] = Field(
        None,
        description='Secret Manager secret id for username to authenticate to private registry.',
    )
    metadata: Optional[TemplateMetadata] = Field(
        None,
        description='Metadata describing a template including description and validation rules.',
    )
    sdkInfo: Optional[SDKInfo] = Field(
        None, description='Required. SDK info of the Flex Template.'
    )


class CreateJobFromTemplateRequest(BaseModel):
    environment: Optional[RuntimeEnvironment] = Field(
        None, description='The runtime environment for the job.'
    )
    gcsPath: Optional[str] = Field(
        None,
        description='Required. A Cloud Storage path to the template from which to create the job. Must be a valid Cloud Storage URL, beginning with `gs://`.',
    )
    jobName: Optional[str] = Field(
        None, description='Required. The job name to use for the created job.'
    )
    location: Optional[str] = Field(
        None,
        description='The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) to which to direct the request.',
    )
    parameters: Optional[Dict[str, str]] = Field(
        None, description='The runtime parameters to pass to the job.'
    )


class DistributionUpdate(BaseModel):
    count: Optional[SplitInt64] = Field(
        None,
        description='The count of the number of elements present in the distribution.',
    )
    histogram: Optional[Histogram] = Field(
        None, description='(Optional) Histogram of value counts for the distribution.'
    )
    max: Optional[SplitInt64] = Field(
        None, description='The maximum value present in the distribution.'
    )
    min: Optional[SplitInt64] = Field(
        None, description='The minimum value present in the distribution.'
    )
    sum: Optional[SplitInt64] = Field(
        None,
        description="Use an int64 since we'd prefer the added precision. If overflow is a common problem we can detect it and use an additional int64 or a double.",
    )
    sumOfSquares: Optional[float] = Field(
        None,
        description='Use a double since the sum of squares is likely to overflow int64.',
    )


class ExecutionStageSummary(BaseModel):
    componentSource: Optional[List[ComponentSource]] = Field(
        None,
        description='Collections produced and consumed by component transforms of this stage.',
    )
    componentTransform: Optional[List[ComponentTransform]] = Field(
        None, description='Transforms that comprise this execution stage.'
    )
    id: Optional[str] = Field(
        None, description='Dataflow service generated id for this stage.'
    )
    inputSource: Optional[List[StageSource]] = Field(
        None, description='Input sources for this stage.'
    )
    kind: Optional[Kind1] = Field(
        None, description='Type of transform this stage is executing.'
    )
    name: Optional[str] = Field(
        None, description='Dataflow service generated name for this stage.'
    )
    outputSource: Optional[List[StageSource]] = Field(
        None, description='Output sources for this stage.'
    )
    prerequisiteStage: Optional[List[str]] = Field(
        None, description='Other stages that must complete before this stage can run.'
    )


class FlattenInstruction(BaseModel):
    inputs: Optional[List[InstructionInput]] = Field(
        None, description='Describes the inputs to the flatten instruction.'
    )


class FloatingPointMean(BaseModel):
    count: Optional[SplitInt64] = Field(
        None, description='The number of values being aggregated.'
    )
    sum: Optional[float] = Field(
        None, description='The sum of all values being aggregated.'
    )


class HotKeyDebuggingInfo(BaseModel):
    detectedHotKeys: Optional[Dict[str, HotKeyInfo]] = Field(
        None,
        description='Debugging information for each detected hot key. Keyed by a hash of the key.',
    )


class IntegerGauge(BaseModel):
    timestamp: Optional[str] = Field(
        None,
        description='The time at which this value was measured. Measured as msecs from epoch.',
    )
    value: Optional[SplitInt64] = Field(
        None, description='The value of the variable represented by this gauge.'
    )


class IntegerList(BaseModel):
    elements: Optional[List[SplitInt64]] = Field(
        None, description='Elements of the list.'
    )


class IntegerMean(BaseModel):
    count: Optional[SplitInt64] = Field(
        None, description='The number of values being aggregated.'
    )
    sum: Optional[SplitInt64] = Field(
        None, description='The sum of all values being aggregated.'
    )


class JobExecutionInfo(BaseModel):
    stages: Optional[Dict[str, JobExecutionStageInfo]] = Field(
        None,
        description='A mapping from each stage to the information about that stage.',
    )


class JobMetadata(BaseModel):
    bigTableDetails: Optional[List[BigTableIODetails]] = Field(
        None,
        description='Identification of a Cloud Bigtable source used in the Dataflow job.',
    )
    bigqueryDetails: Optional[List[BigQueryIODetails]] = Field(
        None,
        description='Identification of a BigQuery source used in the Dataflow job.',
    )
    datastoreDetails: Optional[List[DatastoreIODetails]] = Field(
        None,
        description='Identification of a Datastore source used in the Dataflow job.',
    )
    fileDetails: Optional[List[FileIODetails]] = Field(
        None, description='Identification of a File source used in the Dataflow job.'
    )
    pubsubDetails: Optional[List[PubSubIODetails]] = Field(
        None, description='Identification of a Pub/Sub source used in the Dataflow job.'
    )
    sdkVersion: Optional[SdkVersion] = Field(
        None, description='The SDK version used to run the job.'
    )
    spannerDetails: Optional[List[SpannerIODetails]] = Field(
        None, description='Identification of a Spanner source used in the Dataflow job.'
    )
    userDisplayProperties: Optional[Dict[str, str]] = Field(
        None, description='List of display properties to help UI filter jobs.'
    )


class JobMetrics(BaseModel):
    metricTime: Optional[str] = Field(
        None, description='Timestamp as of which metric values are current.'
    )
    metrics: Optional[List[MetricUpdate]] = Field(
        None, description='All metrics for this job.'
    )


class LaunchFlexTemplateParameter(BaseModel):
    containerSpec: Optional[ContainerSpec] = Field(
        None, description='Spec about the container image to launch.'
    )
    containerSpecGcsPath: Optional[str] = Field(
        None,
        description='Cloud Storage path to a file with json serialized ContainerSpec as content.',
    )
    environment: Optional[FlexTemplateRuntimeEnvironment] = Field(
        None, description='The runtime environment for the FlexTemplate job'
    )
    jobName: Optional[str] = Field(
        None,
        description='Required. The job name to use for the created job. For update job request, job name should be same as the existing running job.',
    )
    launchOptions: Optional[Dict[str, str]] = Field(
        None,
        description='Launch options for this flex template job. This is a common set of options across languages and templates. This should not be used to pass job parameters.',
    )
    parameters: Optional[Dict[str, str]] = Field(
        None, description='The parameters for FlexTemplate. Ex. {"num_workers":"5"}'
    )
    transformNameMappings: Optional[Dict[str, str]] = Field(
        None,
        description='Use this to pass transform_name_mappings for streaming update jobs. Ex:{"oldTransformName":"newTransformName",...}\'',
    )
    update: Optional[bool] = Field(
        None,
        description='Set this to true if you are sending a request to update a running streaming job. When set, the job name should be the same as the running job.',
    )


class LaunchFlexTemplateRequest(BaseModel):
    launchParameter: Optional[LaunchFlexTemplateParameter] = Field(
        None, description='Required. Parameter to launch a job form Flex Template.'
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='If true, the request is validated but not actually executed. Defaults to false.',
    )


class LaunchTemplateParameters(BaseModel):
    environment: Optional[RuntimeEnvironment] = Field(
        None, description='The runtime environment for the job.'
    )
    jobName: Optional[str] = Field(
        None,
        description='Required. The job name to use for the created job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`',
    )
    parameters: Optional[Dict[str, str]] = Field(
        None, description='The runtime parameters to pass to the job.'
    )
    transformNameMapping: Optional[Dict[str, str]] = Field(
        None,
        description='Only applicable when updating a pipeline. Map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.',
    )
    update: Optional[bool] = Field(
        None,
        description='If set, replace the existing pipeline with the name specified by jobName with this pipeline, preserving state.',
    )


class ListJobMessagesResponse(BaseModel):
    autoscalingEvents: Optional[List[AutoscalingEvent]] = Field(
        None, description='Autoscaling events in ascending timestamp order.'
    )
    jobMessages: Optional[List[JobMessage]] = Field(
        None, description='Messages in ascending timestamp order.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The token to obtain the next page of results if there are more.',
    )


class ListSnapshotsResponse(BaseModel):
    snapshots: Optional[List[Snapshot]] = Field(None, description='Returned snapshots.')


class PipelineDescription(BaseModel):
    displayData: Optional[List[DisplayData]] = Field(
        None, description='Pipeline level display data.'
    )
    executionPipelineStage: Optional[List[ExecutionStageSummary]] = Field(
        None, description='Description of each stage of execution of the pipeline.'
    )
    originalPipelineTransform: Optional[List[TransformSummary]] = Field(
        None,
        description='Description of each transform in the pipeline and collections between them.',
    )
    stepNamesHash: Optional[str] = Field(
        None,
        description='A hash value of the submitted pipeline portable graph step names if exists.',
    )


class RuntimeMetadata(BaseModel):
    parameters: Optional[List[ParameterMetadata]] = Field(
        None, description='The parameters for the template.'
    )
    sdkInfo: Optional[SDKInfo] = Field(None, description='SDK Info for the template.')


class SeqMapTaskOutputInfo(BaseModel):
    sink: Optional[Sink] = Field(
        None, description='The sink to write the output value to.'
    )
    tag: Optional[str] = Field(
        None,
        description='The id of the TupleTag the user code will tag the output value by.',
    )


class Source(BaseModel):
    baseSpecs: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='While splitting, sources may specify the produced bundles as differences against another source, in order to save backend-side memory and allow bigger jobs. For details, see SourceSplitRequest. To support this use case, the full set of parameters of the source is logically obtained by taking the latest explicitly specified value of each parameter in the order: base_specs (later items win), spec (overrides anything in base_specs).',
    )
    codec: Optional[Dict[str, Any]] = Field(
        None, description='The codec to use to decode data read from the source.'
    )
    doesNotNeedSplitting: Optional[bool] = Field(
        None,
        description="Setting this value to true hints to the framework that the source doesn't need splitting, and using SourceSplitRequest on it would yield SOURCE_SPLIT_OUTCOME_USE_CURRENT. E.g. a file splitter may set this to true when splitting a single file into a set of byte ranges of appropriate size, and set this to false when splitting a filepattern into individual files. However, for efficiency, a file splitter may decide to produce file subranges directly from the filepattern to avoid a splitting round-trip. See SourceSplitRequest for an overview of the splitting process. This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.",
    )
    metadata: Optional[SourceMetadata] = Field(
        None,
        description="Optionally, metadata for this source can be supplied right away, avoiding a SourceGetMetadataOperation roundtrip (see SourceOperationRequest). This field is meaningful only in the Source objects populated by the user (e.g. when filling in a DerivedSource). Source objects supplied by the framework to the user don't have this field populated.",
    )
    spec: Optional[Dict[str, Any]] = Field(
        None, description='The source to read from, plus its parameters.'
    )


class SourceGetMetadataRequest(BaseModel):
    source: Optional[Source] = Field(
        None,
        description='Specification of the source whose metadata should be computed.',
    )


class SourceGetMetadataResponse(BaseModel):
    metadata: Optional[SourceMetadata] = Field(
        None, description='The computed metadata.'
    )


class SourceSplitRequest(BaseModel):
    options: Optional[SourceSplitOptions] = Field(
        None, description='Hints for tuning the splitting process.'
    )
    source: Optional[Source] = Field(
        None, description='Specification of the source to be split.'
    )


class SourceSplitShard(BaseModel):
    derivationMode: Optional[DerivationMode] = Field(None, description='DEPRECATED')
    source: Optional[Source] = Field(None, description='DEPRECATED')


class StragglerDebuggingInfo(BaseModel):
    hotKey: Optional[HotKeyDebuggingInfo] = Field(
        None, description='Hot key debugging details.'
    )


class StragglerInfo(BaseModel):
    causes: Optional[Dict[str, StragglerDebuggingInfo]] = Field(
        None,
        description='The straggler causes, keyed by the string representation of the StragglerCause enum and contains specialized debugging information for each straggler cause.',
    )
    startTime: Optional[str] = Field(
        None, description='The time when the work item attempt became a straggler.'
    )


class StreamLocation(BaseModel):
    customSourceLocation: Optional[CustomSourceLocation] = Field(
        None, description='The stream is a custom source.'
    )
    pubsubLocation: Optional[PubsubLocation] = Field(
        None, description='The stream is a pubsub stream.'
    )
    sideInputLocation: Optional[StreamingSideInputLocation] = Field(
        None, description='The stream is a streaming side input.'
    )
    streamingStageLocation: Optional[StreamingStageLocation] = Field(
        None,
        description='The stream is part of another computation within the current streaming Dataflow job.',
    )


class TaskRunnerSettings(BaseModel):
    alsologtostderr: Optional[bool] = Field(
        None, description='Whether to also send taskrunner log info to stderr.'
    )
    baseTaskDir: Optional[str] = Field(
        None, description='The location on the worker for task-specific subdirectories.'
    )
    baseUrl: Optional[str] = Field(
        None,
        description='The base URL for the taskrunner to use when accessing Google Cloud APIs. When workers access Google Cloud APIs, they logically do so via relative URLs. If this field is specified, it supplies the base URL to use for resolving these relative URLs. The normative algorithm used is defined by RFC 1808, "Relative Uniform Resource Locators". If not specified, the default value is "http://www.googleapis.com/"',
    )
    commandlinesFileName: Optional[str] = Field(
        None, description='The file to store preprocessing commands in.'
    )
    continueOnException: Optional[bool] = Field(
        None, description='Whether to continue taskrunner if an exception is hit.'
    )
    dataflowApiVersion: Optional[str] = Field(
        None, description='The API version of endpoint, e.g. "v1b3"'
    )
    harnessCommand: Optional[str] = Field(
        None, description='The command to launch the worker harness.'
    )
    languageHint: Optional[str] = Field(
        None, description='The suggested backend language.'
    )
    logDir: Optional[str] = Field(
        None, description='The directory on the VM to store logs.'
    )
    logToSerialconsole: Optional[bool] = Field(
        None,
        description='Whether to send taskrunner log info to Google Compute Engine VM serial console.',
    )
    logUploadLocation: Optional[str] = Field(
        None,
        description='Indicates where to put logs. If this is not specified, the logs will not be uploaded. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}',
    )
    oauthScopes: Optional[List[str]] = Field(
        None,
        description='The OAuth2 scopes to be requested by the taskrunner in order to access the Cloud Dataflow API.',
    )
    parallelWorkerSettings: Optional[WorkerSettings] = Field(
        None, description='The settings to pass to the parallel worker harness.'
    )
    streamingWorkerMainClass: Optional[str] = Field(
        None, description='The streaming worker main class name.'
    )
    taskGroup: Optional[str] = Field(
        None,
        description='The UNIX group ID on the worker VM to use for tasks launched by taskrunner; e.g. "wheel".',
    )
    taskUser: Optional[str] = Field(
        None,
        description='The UNIX user ID on the worker VM to use for tasks launched by taskrunner; e.g. "root".',
    )
    tempStoragePrefix: Optional[str] = Field(
        None,
        description='The prefix of the resources the taskrunner should use for temporary storage. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}',
    )
    vmId: Optional[str] = Field(None, description='The ID string of the VM.')
    workflowFileName: Optional[str] = Field(
        None, description='The file to store the workflow in.'
    )


class WorkItemDetails(BaseModel):
    attemptId: Optional[str] = Field(None, description='Attempt ID of this work item')
    endTime: Optional[str] = Field(
        None,
        description='End time of this work item attempt. If the work item is completed, this is the actual end time of the work item. Otherwise, it is the predicted end time.',
    )
    metrics: Optional[List[MetricUpdate]] = Field(
        None, description='Metrics for this work item.'
    )
    progress: Optional[ProgressTimeseries] = Field(
        None, description='Progress of this work item.'
    )
    startTime: Optional[str] = Field(
        None, description='Start time of this work item attempt.'
    )
    state: Optional[State1] = Field(None, description='State of this work item.')
    stragglerInfo: Optional[StragglerInfo] = Field(
        None, description='Information about straggler detections for this work item.'
    )
    taskId: Optional[str] = Field(None, description='Name of this work item.')


class WorkerDetails(BaseModel):
    workItems: Optional[List[WorkItemDetails]] = Field(
        None, description='Work items processed by this worker, sorted by time.'
    )
    workerName: Optional[str] = Field(None, description='Name of this worker')


class WorkerMessage(BaseModel):
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Labels are used to group WorkerMessages. For example, a worker_message about a particular container might have the labels: { "JOB_ID": "2015-04-22", "WORKER_ID": "wordcount-vm-2015…" "CONTAINER_TYPE": "worker", "CONTAINER_ID": "ac1234def"} Label tags typically correspond to Label enum values. However, for ease of development other strings can be used as tags. LABEL_UNSPECIFIED should not be used here.',
    )
    time: Optional[str] = Field(
        None, description='The timestamp of the worker_message.'
    )
    workerHealthReport: Optional[WorkerHealthReport] = Field(
        None, description='The health of a worker.'
    )
    workerLifecycleEvent: Optional[WorkerLifecycleEvent] = Field(
        None, description='Record of worker lifecycle events.'
    )
    workerMessageCode: Optional[WorkerMessageCode] = Field(
        None, description='A worker message code.'
    )
    workerMetrics: Optional[ResourceUtilizationReport] = Field(
        None, description='Resource metrics reported by workers.'
    )
    workerShutdownNotice: Optional[WorkerShutdownNotice] = Field(
        None, description='Shutdown notice by workers.'
    )
    workerThreadScalingReport: Optional[WorkerThreadScalingReport] = Field(
        None, description='Thread scaling information reported by workers.'
    )


class WorkerMessageResponse(BaseModel):
    workerHealthReportResponse: Optional[WorkerHealthReportResponse] = Field(
        None, description="The service's response to a worker's health report."
    )
    workerMetricsResponse: Optional[ResourceUtilizationReportResponse] = Field(
        None,
        description="Service's response to reporting worker metrics (currently empty).",
    )
    workerShutdownNoticeResponse: Optional[WorkerShutdownNoticeResponse] = Field(
        None, description="Service's response to shutdown notice (currently empty)."
    )
    workerThreadScalingReportResponse: Optional[WorkerThreadScalingReportResponse] = (
        Field(None, description="Service's thread scaling recommendation for workers.")
    )


class WorkerPool(BaseModel):
    autoscalingSettings: Optional[AutoscalingSettings] = Field(
        None, description='Settings for autoscaling of this WorkerPool.'
    )
    dataDisks: Optional[List[Disk]] = Field(
        None, description='Data disks that are used by a VM in this workflow.'
    )
    defaultPackageSet: Optional[DefaultPackageSet] = Field(
        None,
        description='The default package set to install. This allows the service to select a default set of packages which are useful to worker harnesses written in a particular language.',
    )
    diskSizeGb: Optional[int] = Field(
        None,
        description='Size of root disk for VMs, in GB. If zero or unspecified, the service will attempt to choose a reasonable default.',
    )
    diskSourceImage: Optional[str] = Field(
        None, description='Fully qualified source image for disks.'
    )
    diskType: Optional[str] = Field(
        None,
        description='Type of root disk for VMs. If empty or unspecified, the service will attempt to choose a reasonable default.',
    )
    ipConfiguration: Optional[IpConfiguration] = Field(
        None, description='Configuration for VM IPs.'
    )
    kind: Optional[str] = Field(
        None,
        description='The kind of the worker pool; currently only `harness` and `shuffle` are supported.',
    )
    machineType: Optional[str] = Field(
        None,
        description='Machine type (e.g. "n1-standard-1"). If empty or unspecified, the service will attempt to choose a reasonable default.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description='Metadata to set on the Google Compute Engine VMs.'
    )
    network: Optional[str] = Field(
        None,
        description='Network to which VMs will be assigned. If empty or unspecified, the service will use the network "default".',
    )
    numThreadsPerWorker: Optional[int] = Field(
        None,
        description='The number of threads per worker harness. If empty or unspecified, the service will choose a number of threads (according to the number of cores on the selected machine type for batch, or 1 by convention for streaming).',
    )
    numWorkers: Optional[int] = Field(
        None,
        description='Number of Google Compute Engine workers in this pool needed to execute the job. If zero or unspecified, the service will attempt to choose a reasonable default.',
    )
    onHostMaintenance: Optional[str] = Field(
        None,
        description='The action to take on host maintenance, as defined by the Google Compute Engine API.',
    )
    packages: Optional[List[Package]] = Field(
        None, description='Packages to be installed on workers.'
    )
    poolArgs: Optional[Dict[str, Any]] = Field(
        None, description='Extra arguments for this worker pool.'
    )
    sdkHarnessContainerImages: Optional[List[SdkHarnessContainerImage]] = Field(
        None,
        description='Set of SDK harness containers needed to execute this pipeline. This will only be set in the Fn API path. For non-cross-language pipelines this should have only one entry. Cross-language pipelines will have two or more entries.',
    )
    subnetwork: Optional[str] = Field(
        None,
        description='Subnetwork to which VMs will be assigned, if desired. Expected to be of the form "regions/REGION/subnetworks/SUBNETWORK".',
    )
    taskrunnerSettings: Optional[TaskRunnerSettings] = Field(
        None,
        description='Settings passed through to Google Compute Engine workers when using the standard Dataflow task runner. Users should ignore this field.',
    )
    teardownPolicy: Optional[TeardownPolicy] = Field(
        None,
        description="Sets the policy for determining when to turndown worker pool. Allowed values are: `TEARDOWN_ALWAYS`, `TEARDOWN_ON_SUCCESS`, and `TEARDOWN_NEVER`. `TEARDOWN_ALWAYS` means workers are always torn down regardless of whether the job succeeds. `TEARDOWN_ON_SUCCESS` means workers are torn down if the job succeeds. `TEARDOWN_NEVER` means the workers are never torn down. If the workers are not torn down by the service, they will continue to run and use Google Compute Engine VM resources in the user's project until they are explicitly terminated by the user. Because of this, Google recommends using the `TEARDOWN_ALWAYS` policy except for small, manually supervised test jobs. If unknown or unspecified, the service will attempt to choose a reasonable default.",
    )
    workerHarnessContainerImage: Optional[str] = Field(
        None,
        description='Required. Docker container image that executes the Cloud Dataflow worker harness, residing in Google Container Registry. Deprecated for the Fn API path. Use sdk_harness_container_images instead.',
    )
    zone: Optional[str] = Field(
        None,
        description='Zone to run the worker pools in. If empty or unspecified, the service will attempt to choose a reasonable default.',
    )


class ComputationTopology(BaseModel):
    computationId: Optional[str] = Field(None, description='The ID of the computation.')
    inputs: Optional[List[StreamLocation]] = Field(
        None, description='The inputs to the computation.'
    )
    keyRanges: Optional[List[KeyRangeLocation]] = Field(
        None, description='The key ranges processed by the computation.'
    )
    outputs: Optional[List[StreamLocation]] = Field(
        None, description='The outputs from the computation.'
    )
    stateFamilies: Optional[List[StateFamilyConfig]] = Field(
        None, description='The state family values.'
    )
    systemStageName: Optional[str] = Field(None, description='The system stage name.')


class CounterUpdate(BaseModel):
    boolean: Optional[bool] = Field(None, description='Boolean value for And, Or.')
    cumulative: Optional[bool] = Field(
        None,
        description='True if this counter is reported as the total cumulative aggregate value accumulated since the worker started working on this WorkItem. By default this is false, indicating that this counter is reported as a delta.',
    )
    distribution: Optional[DistributionUpdate] = Field(
        None, description='Distribution data'
    )
    floatingPoint: Optional[float] = Field(
        None, description='Floating point value for Sum, Max, Min.'
    )
    floatingPointList: Optional[FloatingPointList] = Field(
        None, description='List of floating point numbers, for Set.'
    )
    floatingPointMean: Optional[FloatingPointMean] = Field(
        None, description='Floating point mean aggregation value for Mean.'
    )
    integer: Optional[SplitInt64] = Field(
        None, description='Integer value for Sum, Max, Min.'
    )
    integerGauge: Optional[IntegerGauge] = Field(None, description='Gauge data')
    integerList: Optional[IntegerList] = Field(
        None, description='List of integers, for Set.'
    )
    integerMean: Optional[IntegerMean] = Field(
        None, description='Integer mean aggregation value for Mean.'
    )
    internal: Optional[Any] = Field(
        None,
        description='Value for internally-defined counters used by the Dataflow service.',
    )
    nameAndKind: Optional[NameAndKind] = Field(
        None, description='Counter name and aggregation type.'
    )
    shortId: Optional[str] = Field(
        None,
        description='The service-generated short identifier for this counter. The short_id -> (name, metadata) mapping is constant for the lifetime of a job.',
    )
    stringList: Optional[StringList] = Field(
        None, description='List of strings, for Set.'
    )
    structuredNameAndMetadata: Optional[CounterStructuredNameAndMetadata] = Field(
        None, description='Counter structured name and metadata.'
    )


class DerivedSource(BaseModel):
    derivationMode: Optional[DerivationMode] = Field(
        None, description='What source to base the produced source on (if any).'
    )
    source: Optional[Source] = Field(None, description='Specification of the source.')


class DynamicSourceSplit(BaseModel):
    primary: Optional[DerivedSource] = Field(
        None,
        description='Primary part (continued to be processed by worker). Specified relative to the previously-current source. Becomes current.',
    )
    residual: Optional[DerivedSource] = Field(
        None,
        description='Residual part (returned to the pool of work). Specified relative to the previously-current source.',
    )


class Environment(BaseModel):
    clusterManagerApiService: Optional[str] = Field(
        None,
        description='The type of cluster manager API to use. If unknown or unspecified, the service will attempt to choose a reasonable default. This should be in the form of the API service name, e.g. "compute.googleapis.com".',
    )
    dataset: Optional[str] = Field(
        None,
        description='The dataset for the current project where various workflow related tables are stored. The supported resource type is: Google BigQuery: bigquery.googleapis.com/{dataset}',
    )
    debugOptions: Optional[DebugOptions] = Field(
        None, description='Any debugging options to be supplied to the job.'
    )
    experiments: Optional[List[str]] = Field(
        None,
        description='The list of experiments to enable. This field should be used for SDK related experiments and not for service related experiments. The proper field for service related experiments is service_options.',
    )
    flexResourceSchedulingGoal: Optional[FlexResourceSchedulingGoal] = Field(
        None, description='Which Flexible Resource Scheduling mode to run in.'
    )
    internalExperiments: Optional[Dict[str, Any]] = Field(
        None, description='Experimental settings.'
    )
    sdkPipelineOptions: Optional[Dict[str, Any]] = Field(
        None,
        description='The Cloud Dataflow SDK pipeline options specified by the user. These options are passed through the service and are used to recreate the SDK pipeline options on the worker in a language agnostic and platform independent way.',
    )
    serviceAccountEmail: Optional[str] = Field(
        None,
        description='Identity to run virtual machines as. Defaults to the default account.',
    )
    serviceKmsKeyName: Optional[str] = Field(
        None,
        description='If set, contains the Cloud KMS key identifier used to encrypt data at rest, AKA a Customer Managed Encryption Key (CMEK). Format: projects/PROJECT_ID/locations/LOCATION/keyRings/KEY_RING/cryptoKeys/KEY',
    )
    serviceOptions: Optional[List[str]] = Field(
        None,
        description='The list of service options to enable. This field should be used for service related experiments only. These experiments, when graduating to GA, should be replaced by dedicated fields or become default (i.e. always on).',
    )
    shuffleMode: Optional[ShuffleMode] = Field(
        None, description='Output only. The shuffle mode used for the job.'
    )
    tempStoragePrefix: Optional[str] = Field(
        None,
        description='The prefix of the resources the system should use for temporary storage. The system will append the suffix "/temp-{JOBNAME} to this resource prefix, where {JOBNAME} is the value of the job_name field. The resulting bucket and object prefix is used as the prefix of the resources used to store temporary data needed during the job execution. NOTE: This will override the value in taskrunner_settings. The supported resource type is: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}',
    )
    userAgent: Optional[Dict[str, Any]] = Field(
        None, description='A description of the process that generated the request.'
    )
    version: Optional[Dict[str, Any]] = Field(
        None,
        description='A structure describing which components and their versions of the service are required in order to run the job.',
    )
    workerPools: Optional[List[WorkerPool]] = Field(
        None,
        description='The worker pools. At least one "harness" worker pool must be specified in order for the job to have workers.',
    )
    workerRegion: Optional[str] = Field(
        None,
        description='The Compute Engine region (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1". Mutually exclusive with worker_zone. If neither worker_region nor worker_zone is specified, default to the control plane\'s region.',
    )
    workerZone: Optional[str] = Field(
        None,
        description='The Compute Engine zone (https://cloud.google.com/compute/docs/regions-zones/regions-zones) in which worker processing should occur, e.g. "us-west1-a". Mutually exclusive with worker_region. If neither worker_region nor worker_zone is specified, a zone in the control plane\'s region is chosen based on available capacity.',
    )


class GetTemplateResponse(BaseModel):
    metadata: Optional[TemplateMetadata] = Field(
        None,
        description='The template metadata describing the template name, available parameters, etc.',
    )
    runtimeMetadata: Optional[RuntimeMetadata] = Field(
        None,
        description='Describes the runtime metadata with SDKInfo and available parameters.',
    )
    status: Optional[Status] = Field(
        None,
        description='The status of the get template request. Any problems with the request will be indicated in the error_details.',
    )
    templateType: Optional[TemplateType] = Field(None, description='Template Type.')


class Job(BaseModel):
    clientRequestId: Optional[str] = Field(
        None,
        description="The client's unique identifier of the job, re-used across retried attempts. If this field is set, the service will ensure its uniqueness. The request to create a job will fail if the service has knowledge of a previously submitted job with the same client's ID and job name. The caller may use this field to ensure idempotence of job creation across retried attempts to create a job. By default, the field is empty and, in that case, the service ignores it.",
    )
    createTime: Optional[str] = Field(
        None,
        description='The timestamp when the job was initially created. Immutable and set by the Cloud Dataflow service.',
    )
    createdFromSnapshotId: Optional[str] = Field(
        None,
        description="If this is specified, the job's initial state is populated from the given snapshot.",
    )
    currentState: Optional[CurrentState] = Field(
        None,
        description='The current state of the job. Jobs are created in the `JOB_STATE_STOPPED` state unless otherwise specified. A job in the `JOB_STATE_RUNNING` state may asynchronously enter a terminal state. After a job has reached a terminal state, no further state updates may be made. This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.',
    )
    currentStateTime: Optional[str] = Field(
        None, description='The timestamp associated with the current state.'
    )
    environment: Optional[Environment] = Field(
        None, description='The environment for the job.'
    )
    executionInfo: Optional[JobExecutionInfo] = Field(None, description='Deprecated.')
    id: Optional[str] = Field(
        None,
        description='The unique ID of this job. This field is set by the Cloud Dataflow service when the Job is created, and is immutable for the life of the job.',
    )
    jobMetadata: Optional[JobMetadata] = Field(
        None,
        description='This field is populated by the Dataflow service to support filtering jobs by the metadata values provided here. Populated for ListJobs and all GetJob views SUMMARY and higher.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='User-defined labels for this job. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.',
    )
    location: Optional[str] = Field(
        None,
        description='The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains this job.',
    )
    name: Optional[str] = Field(
        None,
        description='The user-specified Cloud Dataflow job name. Only one Job with a given name can exist in a project within one region at any given time. Jobs in different regions can have the same name. If a caller attempts to create a Job with the same name as an already-existing Job, the attempt returns the existing Job. The name must match the regular expression `[a-z]([-a-z0-9]{0,1022}[a-z0-9])?`',
    )
    pipelineDescription: Optional[PipelineDescription] = Field(
        None,
        description='Preliminary field: The format of this data may change at any time. A description of the user pipeline and stages through which it is executed. Created by Cloud Dataflow service. Only retrieved with JOB_VIEW_DESCRIPTION or JOB_VIEW_ALL.',
    )
    projectId: Optional[str] = Field(
        None,
        description='The ID of the Cloud Platform project that the job belongs to.',
    )
    replaceJobId: Optional[str] = Field(
        None,
        description='If this job is an update of an existing job, this field is the job ID of the job it replaced. When sending a `CreateJobRequest`, you can update a job by specifying it here. The job named here is stopped, and its intermediate state is transferred to this job.',
    )
    replacedByJobId: Optional[str] = Field(
        None,
        description='If another job is an update of this job (and thus, this job is in `JOB_STATE_UPDATED`), this field contains the ID of that job.',
    )
    requestedState: Optional[RequestedState] = Field(
        None,
        description="The job's requested state. `UpdateJob` may be used to switch between the `JOB_STATE_STOPPED` and `JOB_STATE_RUNNING` states, by setting requested_state. `UpdateJob` may also be used to directly set a job's requested state to `JOB_STATE_CANCELLED` or `JOB_STATE_DONE`, irrevocably terminating the job if it has not already reached a terminal state.",
    )
    satisfiesPzs: Optional[bool] = Field(
        None,
        description='Reserved for future use. This field is set only in responses from the server; it is ignored if it is set in any requests.',
    )
    stageStates: Optional[List[ExecutionStageState]] = Field(
        None,
        description='This field may be mutated by the Cloud Dataflow service; callers cannot mutate it.',
    )
    startTime: Optional[str] = Field(
        None,
        description='The timestamp when the job was started (transitioned to JOB_STATE_PENDING). Flexible resource scheduling jobs are started with some delay after job creation, so start_time is unset before start and is updated when the job is started by the Cloud Dataflow service. For other jobs, start_time always equals to create_time and is immutable and set by the Cloud Dataflow service.',
    )
    steps: Optional[List[Step]] = Field(
        None,
        description='Exactly one of step or steps_location should be specified. The top-level steps that constitute the entire job. Only retrieved with JOB_VIEW_ALL.',
    )
    stepsLocation: Optional[str] = Field(
        None, description='The Cloud Storage location where the steps are stored.'
    )
    tempFiles: Optional[List[str]] = Field(
        None,
        description='A set of files the system should be aware of that are used for temporary storage. These temporary files will be removed on job completion. No duplicates are allowed. No file patterns are supported. The supported files are: Google Cloud Storage: storage.googleapis.com/{bucket}/{object} bucket.storage.googleapis.com/{object}',
    )
    transformNameMapping: Optional[Dict[str, str]] = Field(
        None,
        description='The map of transform name prefixes of the job to be replaced to the corresponding name prefixes of the new job.',
    )
    type: Optional[Type] = Field(None, description='The type of Cloud Dataflow job.')


class LaunchFlexTemplateResponse(BaseModel):
    job: Optional[Job] = Field(
        None,
        description='The job that was launched, if the request was not a dry run and the job was successfully launched.',
    )


class LaunchTemplateResponse(BaseModel):
    job: Optional[Job] = Field(
        None,
        description='The job that was launched, if the request was not a dry run and the job was successfully launched.',
    )


class ListJobsResponse(BaseModel):
    failedLocation: Optional[List[FailedLocation]] = Field(
        None,
        description='Zero or more messages describing the [regional endpoints] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that failed to respond.',
    )
    jobs: Optional[List[Job]] = Field(
        None, description='A subset of the requested job information.'
    )
    nextPageToken: Optional[str] = Field(
        None, description='Set if there may be more results than fit in this response.'
    )


class ReadInstruction(BaseModel):
    source: Optional[Source] = Field(None, description='The source to read from.')


class SendWorkerMessagesRequest(BaseModel):
    location: Optional[str] = Field(
        None,
        description='The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the job.',
    )
    workerMessages: Optional[List[WorkerMessage]] = Field(
        None, description='The WorkerMessages to send.'
    )


class SendWorkerMessagesResponse(BaseModel):
    workerMessageResponses: Optional[List[WorkerMessageResponse]] = Field(
        None, description='The servers response to the worker messages.'
    )


class SideInputInfo(BaseModel):
    kind: Optional[Dict[str, Any]] = Field(
        None,
        description='How to interpret the source element(s) as a side input value.',
    )
    sources: Optional[List[Source]] = Field(
        None,
        description='The source(s) to read element(s) from to get the value of this side input. If more than one source, then the elements are taken from the sources, in the specified order if order matters. At least one source is required.',
    )
    tag: Optional[str] = Field(
        None,
        description='The id of the tag the user code will access this side input by; this should correspond to the tag of some MultiOutputInfo.',
    )


class SourceFork(BaseModel):
    primary: Optional[SourceSplitShard] = Field(None, description='DEPRECATED')
    primarySource: Optional[DerivedSource] = Field(None, description='DEPRECATED')
    residual: Optional[SourceSplitShard] = Field(None, description='DEPRECATED')
    residualSource: Optional[DerivedSource] = Field(None, description='DEPRECATED')


class SourceOperationRequest(BaseModel):
    getMetadata: Optional[SourceGetMetadataRequest] = Field(
        None, description='Information about a request to get metadata about a source.'
    )
    name: Optional[str] = Field(
        None, description='User-provided name of the Read instruction for this source.'
    )
    originalName: Optional[str] = Field(
        None,
        description='System-defined name for the Read instruction for this source in the original workflow graph.',
    )
    split: Optional[SourceSplitRequest] = Field(
        None, description='Information about a request to split a source.'
    )
    stageName: Optional[str] = Field(
        None,
        description='System-defined name of the stage containing the source operation. Unique across the workflow.',
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of the Read instruction for this source. Unique across the workflow.',
    )


class SourceSplitResponse(BaseModel):
    bundles: Optional[List[DerivedSource]] = Field(
        None,
        description='If outcome is SPLITTING_HAPPENED, then this is a list of bundles into which the source was split. Otherwise this field is ignored. This list can be empty, which means the source represents an empty input.',
    )
    outcome: Optional[Outcome] = Field(
        None,
        description='Indicates whether splitting happened and produced a list of bundles. If this is USE_CURRENT_SOURCE_AS_IS, the current source should be processed "as is" without splitting. "bundles" is ignored in this case. If this is SPLITTING_HAPPENED, then "bundles" contains a list of bundles into which the source was split.',
    )
    shards: Optional[List[SourceSplitShard]] = Field(
        None, description='DEPRECATED in favor of bundles.'
    )


class StageExecutionDetails(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If present, this response does not contain all requested tasks. To obtain the next page of results, repeat the request with page_token set to this value.',
    )
    workers: Optional[List[WorkerDetails]] = Field(
        None, description='Workers that have done work on the stage.'
    )


class Straggler(BaseModel):
    batchStraggler: Optional[StragglerInfo] = Field(
        None, description='Batch straggler identification and debugging information.'
    )
    streamingStraggler: Optional[StreamingStragglerInfo] = Field(
        None,
        description='Streaming straggler identification and debugging information.',
    )


class StragglerSummary(BaseModel):
    recentStragglers: Optional[List[Straggler]] = Field(
        None, description='The most recent stragglers.'
    )
    stragglerCauseCount: Optional[Dict[str, str]] = Field(
        None,
        description='Aggregated counts of straggler causes, keyed by the string representation of the StragglerCause enum.',
    )
    totalStragglerCount: Optional[str] = Field(
        None, description='The total count of stragglers.'
    )


class TopologyConfig(BaseModel):
    computations: Optional[List[ComputationTopology]] = Field(
        None, description='The computations associated with a streaming Dataflow job.'
    )
    dataDiskAssignments: Optional[List[DataDiskAssignment]] = Field(
        None, description='The disks assigned to a streaming Dataflow job.'
    )
    forwardingKeyBits: Optional[int] = Field(
        None,
        description='The size (in bits) of keys that will be assigned to source messages.',
    )
    persistentStateVersion: Optional[int] = Field(
        None, description='Version number for persistent state.'
    )
    userStageToComputationNameMap: Optional[Dict[str, str]] = Field(
        None, description='Maps user stage names to stable computation names.'
    )


class ParDoInstruction(BaseModel):
    input: Optional[InstructionInput] = Field(None, description='The input.')
    multiOutputInfos: Optional[List[MultiOutputInfo]] = Field(
        None,
        description='Information about each of the outputs, if user_fn is a MultiDoFn.',
    )
    numOutputs: Optional[int] = Field(None, description='The number of outputs.')
    sideInputs: Optional[List[SideInputInfo]] = Field(
        None, description='Zero or more side inputs.'
    )
    userFn: Optional[Dict[str, Any]] = Field(
        None, description='The user function to invoke.'
    )


class PartialGroupByKeyInstruction(BaseModel):
    input: Optional[InstructionInput] = Field(
        None, description='Describes the input to the partial group-by-key instruction.'
    )
    inputElementCodec: Optional[Dict[str, Any]] = Field(
        None,
        description='The codec to use for interpreting an element in the input PTable.',
    )
    originalCombineValuesInputStoreName: Optional[str] = Field(
        None,
        description='If this instruction includes a combining function this is the name of the intermediate store between the GBK and the CombineValues.',
    )
    originalCombineValuesStepName: Optional[str] = Field(
        None,
        description='If this instruction includes a combining function, this is the name of the CombineValues instruction lifted into this instruction.',
    )
    sideInputs: Optional[List[SideInputInfo]] = Field(
        None, description='Zero or more side inputs.'
    )
    valueCombiningFn: Optional[Dict[str, Any]] = Field(
        None, description='The value combining function to invoke.'
    )


class SeqMapTask(BaseModel):
    inputs: Optional[List[SideInputInfo]] = Field(
        None, description='Information about each of the inputs.'
    )
    name: Optional[str] = Field(
        None, description='The user-provided name of the SeqDo operation.'
    )
    outputInfos: Optional[List[SeqMapTaskOutputInfo]] = Field(
        None, description='Information about each of the outputs.'
    )
    stageName: Optional[str] = Field(
        None,
        description='System-defined name of the stage containing the SeqDo operation. Unique across the workflow.',
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of the SeqDo operation. Unique across the workflow.',
    )
    userFn: Optional[Dict[str, Any]] = Field(
        None, description='The user function to invoke.'
    )


class SourceOperationResponse(BaseModel):
    getMetadata: Optional[SourceGetMetadataResponse] = Field(
        None, description='A response to a request to get metadata about a source.'
    )
    split: Optional[SourceSplitResponse] = Field(
        None, description='A response to a request to split a source.'
    )


class StageSummary(BaseModel):
    endTime: Optional[str] = Field(
        None,
        description='End time of this stage. If the work item is completed, this is the actual end time of the stage. Otherwise, it is the predicted end time.',
    )
    metrics: Optional[List[MetricUpdate]] = Field(
        None, description='Metrics for this stage.'
    )
    progress: Optional[ProgressTimeseries] = Field(
        None, description='Progress for this stage. Only applicable to Batch jobs.'
    )
    stageId: Optional[str] = Field(None, description='ID of this stage')
    startTime: Optional[str] = Field(None, description='Start time of this stage.')
    state: Optional[State1] = Field(None, description='State of this stage.')
    stragglerSummary: Optional[StragglerSummary] = Field(
        None, description='Straggler summary for this stage.'
    )


class StreamingSetupTask(BaseModel):
    drain: Optional[bool] = Field(None, description='The user has requested drain.')
    receiveWorkPort: Optional[int] = Field(
        None,
        description='The TCP port on which the worker should listen for messages from other streaming computation workers.',
    )
    snapshotConfig: Optional[StreamingApplianceSnapshotConfig] = Field(
        None, description='Configures streaming appliance snapshot.'
    )
    streamingComputationTopology: Optional[TopologyConfig] = Field(
        None, description='The global topology of the streaming Dataflow job.'
    )
    workerHarnessPort: Optional[int] = Field(
        None,
        description='The TCP port used by the worker to communicate with the Dataflow worker harness.',
    )


class JobExecutionDetails(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='If present, this response does not contain all requested tasks. To obtain the next page of results, repeat the request with page_token set to this value.',
    )
    stages: Optional[List[StageSummary]] = Field(
        None, description='The stages of the job execution.'
    )


class ParallelInstruction(BaseModel):
    flatten: Optional[FlattenInstruction] = Field(
        None, description='Additional information for Flatten instructions.'
    )
    name: Optional[str] = Field(
        None, description='User-provided name of this operation.'
    )
    originalName: Optional[str] = Field(
        None,
        description='System-defined name for the operation in the original workflow graph.',
    )
    outputs: Optional[List[InstructionOutput]] = Field(
        None, description='Describes the outputs of the instruction.'
    )
    parDo: Optional[ParDoInstruction] = Field(
        None, description='Additional information for ParDo instructions.'
    )
    partialGroupByKey: Optional[PartialGroupByKeyInstruction] = Field(
        None, description='Additional information for PartialGroupByKey instructions.'
    )
    read: Optional[ReadInstruction] = Field(
        None, description='Additional information for Read instructions.'
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of this operation. Unique across the workflow.',
    )
    write: Optional[WriteInstruction] = Field(
        None, description='Additional information for Write instructions.'
    )


class StreamingComputationConfig(BaseModel):
    computationId: Optional[str] = Field(
        None, description='Unique identifier for this computation.'
    )
    instructions: Optional[List[ParallelInstruction]] = Field(
        None, description='Instructions that comprise the computation.'
    )
    stageName: Optional[str] = Field(
        None, description='Stage name of this computation.'
    )
    systemName: Optional[str] = Field(
        None, description='System defined name for this computation.'
    )
    transformUserNameToStateFamily: Optional[Dict[str, str]] = Field(
        None,
        description='Map from user name of stateful transforms in this stage to their state family.',
    )


class StreamingConfigTask(BaseModel):
    commitStreamChunkSizeBytes: Optional[str] = Field(
        None, description='Chunk size for commit streams from the harness to windmill.'
    )
    getDataStreamChunkSizeBytes: Optional[str] = Field(
        None,
        description='Chunk size for get data streams from the harness to windmill.',
    )
    maxWorkItemCommitBytes: Optional[str] = Field(
        None,
        description='Maximum size for work item commit supported windmill storage layer.',
    )
    streamingComputationConfigs: Optional[List[StreamingComputationConfig]] = Field(
        None, description='Set of computation configuration information.'
    )
    userStepToStateFamilyNameMap: Optional[Dict[str, str]] = Field(
        None, description='Map from user step names to state families.'
    )
    windmillServiceEndpoint: Optional[str] = Field(
        None,
        description='If present, the worker must use this endpoint to communicate with Windmill Service dispatchers, otherwise the worker must continue to use whatever endpoint it had been using.',
    )
    windmillServicePort: Optional[str] = Field(
        None,
        description='If present, the worker must use this port to communicate with Windmill Service dispatchers. Only applicable when windmill_service_endpoint is specified.',
    )


class MapTask(BaseModel):
    counterPrefix: Optional[str] = Field(
        None,
        description='Counter prefix that can be used to prefix counters. Not currently used in Dataflow.',
    )
    instructions: Optional[List[ParallelInstruction]] = Field(
        None, description='The instructions in the MapTask.'
    )
    stageName: Optional[str] = Field(
        None,
        description='System-defined name of the stage containing this MapTask. Unique across the workflow.',
    )
    systemName: Optional[str] = Field(
        None,
        description='System-defined name of this MapTask. Unique across the workflow.',
    )


class WorkItem(BaseModel):
    configuration: Optional[str] = Field(
        None, description='Work item-specific configuration as an opaque blob.'
    )
    id: Optional[str] = Field(None, description='Identifies this WorkItem.')
    initialReportIndex: Optional[str] = Field(
        None,
        description='The initial index to use when reporting the status of the WorkItem.',
    )
    jobId: Optional[str] = Field(
        None, description='Identifies the workflow job this WorkItem belongs to.'
    )
    leaseExpireTime: Optional[str] = Field(
        None, description='Time when the lease on this Work will expire.'
    )
    mapTask: Optional[MapTask] = Field(
        None, description='Additional information for MapTask WorkItems.'
    )
    packages: Optional[List[Package]] = Field(
        None,
        description='Any required packages that need to be fetched in order to execute this WorkItem.',
    )
    projectId: Optional[str] = Field(
        None, description='Identifies the cloud project this WorkItem belongs to.'
    )
    reportStatusInterval: Optional[str] = Field(
        None, description='Recommended reporting interval.'
    )
    seqMapTask: Optional[SeqMapTask] = Field(
        None, description='Additional information for SeqMapTask WorkItems.'
    )
    shellTask: Optional[ShellTask] = Field(
        None, description='Additional information for ShellTask WorkItems.'
    )
    sourceOperationTask: Optional[SourceOperationRequest] = Field(
        None, description='Additional information for source operation WorkItems.'
    )
    streamingComputationTask: Optional[StreamingComputationTask] = Field(
        None,
        description='Additional information for StreamingComputationTask WorkItems.',
    )
    streamingConfigTask: Optional[StreamingConfigTask] = Field(
        None, description='Additional information for StreamingConfigTask WorkItems.'
    )
    streamingSetupTask: Optional[StreamingSetupTask] = Field(
        None, description='Additional information for StreamingSetupTask WorkItems.'
    )


class LeaseWorkItemResponse(BaseModel):
    unifiedWorkerResponse: Optional[Dict[str, Any]] = Field(
        None, description='Untranslated bag-of-bytes WorkResponse for UnifiedWorker.'
    )
    workItems: Optional[List[WorkItem]] = Field(
        None, description='A list of the leased WorkItems.'
    )


class ApproximateProgress(BaseModel):
    percentComplete: Optional[float] = Field(None, description='Obsolete.')
    position: Optional[Position] = Field(None, description='Obsolete.')
    remainingTime: Optional[str] = Field(None, description='Obsolete.')


class ApproximateReportedProgress(BaseModel):
    consumedParallelism: Optional[ReportedParallelism] = Field(
        None,
        description='Total amount of parallelism in the portion of input of this task that has already been consumed and is no longer active. In the first two examples above (see remaining_parallelism), the value should be 29 or 2 respectively. The sum of remaining_parallelism and consumed_parallelism should equal the total amount of parallelism in this work item. If specified, must be finite.',
    )
    fractionConsumed: Optional[float] = Field(
        None,
        description='Completion as fraction of the input consumed, from 0.0 (beginning, nothing consumed), to 1.0 (end of the input, entire input consumed).',
    )
    position: Optional[Position] = Field(
        None, description='A Position within the work to represent a progress.'
    )
    remainingParallelism: Optional[ReportedParallelism] = Field(
        None,
        description='Total amount of parallelism in the input of this task that remains, (i.e. can be delegated to this task and any new tasks via dynamic splitting). Always at least 1 for non-finished work items and 0 for finished. "Amount of parallelism" refers to how many non-empty parts of the input can be read in parallel. This does not necessarily equal number of records. An input that can be read in parallel down to the individual records is called "perfectly splittable". An example of non-perfectly parallelizable input is a block-compressed file format where a block of records has to be read as a whole, but different blocks can be read in parallel. Examples: * If we are processing record #30 (starting at 1) out of 50 in a perfectly splittable 50-record input, this value should be 21 (20 remaining + 1 current). * If we are reading through block 3 in a block-compressed file consisting of 5 blocks, this value should be 3 (since blocks 4 and 5 can be processed in parallel by new tasks via dynamic splitting and the current task remains processing block 3). * If we are reading through the last block in a block-compressed file, or reading or processing the last record in a perfectly splittable input, this value should be 1, because apart from the current task, no additional remainder can be split off.',
    )


class ApproximateSplitRequest(BaseModel):
    fractionConsumed: Optional[float] = Field(
        None,
        description='A fraction at which to split the work item, from 0.0 (beginning of the input) to 1.0 (end of the input).',
    )
    fractionOfRemainder: Optional[float] = Field(
        None,
        description='The fraction of the remainder of work to split the work item at, from 0.0 (split at the current position) to 1.0 (end of the input).',
    )
    position: Optional[Position] = Field(
        None, description='A Position at which to split the work item.'
    )


class ConcatPosition(BaseModel):
    index: Optional[int] = Field(None, description='Index of the inner source.')
    position: Optional[Position] = Field(
        None, description='Position within the inner source.'
    )


class Position(BaseModel):
    byteOffset: Optional[str] = Field(None, description='Position is a byte offset.')
    concatPosition: Optional[ConcatPosition] = Field(
        None, description='CloudPosition is a concat position.'
    )
    end: Optional[bool] = Field(
        None,
        description='Position is past all other positions. Also useful for the end position of an unbounded range.',
    )
    key: Optional[str] = Field(
        None, description='Position is a string key, ordered lexicographically.'
    )
    recordIndex: Optional[str] = Field(None, description='Position is a record index.')
    shufflePosition: Optional[str] = Field(
        None,
        description='CloudPosition is a base64 encoded BatchShufflePosition (with FIXED sharding).',
    )


class ReportWorkItemStatusRequest(BaseModel):
    currentWorkerTime: Optional[str] = Field(
        None, description='The current timestamp at the worker.'
    )
    location: Optional[str] = Field(
        None,
        description="The [regional endpoint] (https://cloud.google.com/dataflow/docs/concepts/regional-endpoints) that contains the WorkItem's job.",
    )
    unifiedWorkerRequest: Optional[Dict[str, Any]] = Field(
        None,
        description='Untranslated bag-of-bytes WorkProgressUpdateRequest from UnifiedWorker.',
    )
    workItemStatuses: Optional[List[WorkItemStatus]] = Field(
        None,
        description='The order is unimportant, except that the order of the WorkItemServiceState messages in the ReportWorkItemStatusResponse corresponds to the order of WorkItemStatus messages here.',
    )
    workerId: Optional[str] = Field(
        None,
        description='The ID of the worker reporting the WorkItem status. If this does not match the ID of the worker which the Dataflow service believes currently has the lease on the WorkItem, the report will be dropped (with an error response).',
    )


class ReportWorkItemStatusResponse(BaseModel):
    unifiedWorkerResponse: Optional[Dict[str, Any]] = Field(
        None,
        description='Untranslated bag-of-bytes WorkProgressUpdateResponse for UnifiedWorker.',
    )
    workItemServiceStates: Optional[List[WorkItemServiceState]] = Field(
        None,
        description='A set of messages indicating the service-side state for each WorkItem whose status was reported, in the same order as the WorkItemStatus messages in the ReportWorkItemStatusRequest which resulting in this response.',
    )


class WorkItemServiceState(BaseModel):
    completeWorkStatus: Optional[Status] = Field(
        None,
        description='If set, a request to complete the work item with the given status. This will not be set to OK, unless supported by the specific kind of WorkItem. It can be used for the backend to indicate a WorkItem must terminate, e.g., for aborting work.',
    )
    harnessData: Optional[Dict[str, Any]] = Field(
        None,
        description='Other data returned by the service, specific to the particular worker harness.',
    )
    hotKeyDetection: Optional[HotKeyDetection] = Field(
        None,
        description='A hot key is a symptom of poor data distribution in which there are enough elements mapped to a single key to impact pipeline performance. When present, this field includes metadata associated with any hot key.',
    )
    leaseExpireTime: Optional[str] = Field(
        None, description='Time at which the current lease will expire.'
    )
    metricShortId: Optional[List[MetricShortId]] = Field(
        None,
        description='The short ids that workers should use in subsequent metric updates. Workers should strive to use short ids whenever possible, but it is ok to request the short_id again if a worker lost track of it (e.g. if the worker is recovering from a crash). NOTE: it is possible that the response may have short ids for a subset of the metrics.',
    )
    nextReportIndex: Optional[str] = Field(
        None,
        description='The index value to use for the next report sent by the worker. Note: If the report call fails for whatever reason, the worker should reuse this index for subsequent report attempts.',
    )
    reportStatusInterval: Optional[str] = Field(
        None, description='New recommended reporting interval.'
    )
    splitRequest: Optional[ApproximateSplitRequest] = Field(
        None,
        description='The progress point in the WorkItem where the Dataflow service suggests that the worker truncate the task.',
    )
    suggestedStopPoint: Optional[ApproximateProgress] = Field(
        None, description='DEPRECATED in favor of split_request.'
    )
    suggestedStopPosition: Optional[Position] = Field(
        None, description='Obsolete, always empty.'
    )


class WorkItemStatus(BaseModel):
    completed: Optional[bool] = Field(
        None,
        description='True if the WorkItem was completed (successfully or unsuccessfully).',
    )
    counterUpdates: Optional[List[CounterUpdate]] = Field(
        None, description='Worker output counters for this WorkItem.'
    )
    dynamicSourceSplit: Optional[DynamicSourceSplit] = Field(
        None, description='See documentation of stop_position.'
    )
    errors: Optional[List[Status]] = Field(
        None,
        description='Specifies errors which occurred during processing. If errors are provided, and completed = true, then the WorkItem is considered to have failed.',
    )
    metricUpdates: Optional[List[MetricUpdate]] = Field(
        None, description='DEPRECATED in favor of counter_updates.'
    )
    progress: Optional[ApproximateProgress] = Field(
        None, description='DEPRECATED in favor of reported_progress.'
    )
    reportIndex: Optional[str] = Field(
        None,
        description="The report index. When a WorkItem is leased, the lease will contain an initial report index. When a WorkItem's status is reported to the system, the report should be sent with that report index, and the response will contain the index the worker should use for the next report. Reports received with unexpected index values will be rejected by the service. In order to preserve idempotency, the worker should not alter the contents of a report, even if the worker must submit the same report multiple times before getting back a response. The worker should not submit a subsequent report until the response for the previous report had been received from the service.",
    )
    reportedProgress: Optional[ApproximateReportedProgress] = Field(
        None, description="The worker's progress through this WorkItem."
    )
    requestedLeaseDuration: Optional[str] = Field(
        None, description='Amount of time the worker requests for its lease.'
    )
    sourceFork: Optional[SourceFork] = Field(
        None, description='DEPRECATED in favor of dynamic_source_split.'
    )
    sourceOperationResponse: Optional[SourceOperationResponse] = Field(
        None,
        description='If the work item represented a SourceOperationRequest, and the work is completed, contains the result of the operation.',
    )
    stopPosition: Optional[Position] = Field(
        None,
        description='A worker may split an active map task in two parts, "primary" and "residual", continuing to process the primary part and returning the residual part into the pool of available work. This event is called a "dynamic split" and is critical to the dynamic work rebalancing feature. The two obtained sub-tasks are called "parts" of the split. The parts, if concatenated, must represent the same input as would be read by the current task if the split did not happen. The exact way in which the original task is decomposed into the two parts is specified either as a position demarcating them (stop_position), or explicitly as two DerivedSources, if this task consumes a user-defined source type (dynamic_source_split). The "current" task is adjusted as a result of the split: after a task with range [A, B) sends a stop_position update at C, its range is considered to be [A, C), e.g.: * Progress should be interpreted relative to the new range, e.g. "75% completed" means "75% of [A, C) completed" * The worker should interpret proposed_stop_position relative to the new range, e.g. "split at 68%" should be interpreted as "split at 68% of [A, C)". * If the worker chooses to split again using stop_position, only stop_positions in [A, C) will be accepted. * Etc. dynamic_source_split has similar semantics: e.g., if a task with source S splits using dynamic_source_split into {P, R} (where P and R must be together equivalent to S), then subsequent progress and proposed_stop_position should be interpreted relative to P, and in a potential subsequent dynamic_source_split into {P\', R\'}, P\' and R\' must be together equivalent to P, etc.',
    )
    totalThrottlerWaitTimeSeconds: Optional[float] = Field(
        None,
        description='Total time the worker spent being throttled by external systems.',
    )
    workItemId: Optional[str] = Field(None, description='Identifies the WorkItem.')


ResourceUtilizationReport.model_rebuild()
ApproximateProgress.model_rebuild()
ApproximateReportedProgress.model_rebuild()
ApproximateSplitRequest.model_rebuild()
ConcatPosition.model_rebuild()
ReportWorkItemStatusRequest.model_rebuild()
ReportWorkItemStatusResponse.model_rebuild()
